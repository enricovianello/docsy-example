[{"body":"StoRM packages can be obtained from both StoRM product team package repository and UMD4 repository. EPEL and EGI Trust Anchors repositories are also required.\nEPEL StoRM requires EPEL repositories. Install them on CentOS 7 as follows:\nyum install epel-release Or:\nyum localinstall https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-14.noarch.rpm EGI Trust Anchors Install EGI Trust Anchors repository by following EGI instructions.\nIn short:\nwget http://repository.egi.eu/sw/production/cas/1/current/repo-files/EGI-trustanchors.repo -O /etc/yum.repos.d/EGI-trustanchors.repo yum install ca-policy-egi-core The DAG repository must be disabled. If needed, set to 0 the enabled property in your /etc/yum.repos.d/dag.repo file.\nUMD StoRM requires UMD repositories. First of all you should install UMD pgp key:\nrpm --import http://repository.egi.eu/sw/production/umd/UMD-RPM-PGP-KEY Then, install latest UMD-4 repository for CentOS 7 as follows:\nyum localinstall http://repository.egi.eu/sw/production/umd/4/centos7/x86_64/updates/umd-release-4.1.3-1.el7.centos.noarch.rpm More information about UMD installation can be found here.\nStoRM Product Team The latest certified StoRM packages can be found in the StoRM production repository:\n Browse SL7 packages  Note that you should also have UMD repositories installed (as detailed above) for your setup to work as expected.\nTo install the StoRM production repository files, run the following command (as root):\nyum-config-manager --add-repo https://repo.cloud.cnaf.infn.it/repository/storm/storm-stable-centos7.repo ","categories":"","description":"Before installing StoRM components, make sure you have the needed **repositories**.\n","excerpt":"Before installing StoRM components, make sure you have the needed …","ref":"/storm-docs/docs/getting-started/repositories/","tags":"","title":"Repositories"},{"body":"StoRM Authentication And Authorization StoRM Backend and StoRM WebDAV components are able to support VOMS extension, and to use that to define access policy (complete VOMS-awareness). StoRM WebDAV service also supports OAuth tokens authentication and authorization.\nTO-DO\nThe SRM authentication and authorization flow TO-DO\nThere are several steps StoRM does to manage access to file:\n User makes a request with his proxy (hopefully with VOMS extensions) StoRM checks if the user can perform the requested operation on the required resource StoRM ask user mapping to the LCMAPS service StoRM enforce a real ACL on the file and directories requested Jobs running on behalf of the user can perform a direct access on the data  StoRM default ACL StoRM also allows to define default ACLs, a list of ACL entries that will be applied automatically on each read (srmPrepareToGet) and write (srmPrepareToPut) operation. This is useful in case of experiment ise cases, such as the CMS one, that want to allow local access to file on group different from the one that made the SRM request operation. These default ACLs have to be set up on the desired storage area in the namespace.xml file.\nTO-DO\nThe OAuth Token authentication and authorization flow TO-DO\n","categories":"","description":"","excerpt":"StoRM Authentication And Authorization StoRM Backend and StoRM WebDAV …","ref":"/storm-docs/docs/concepts/storm-security/","tags":"","title":"StoRM Security"},{"body":"Prerequisites You need:\n basic StoRM services installated an Argus authorization system installed (see Argus twiki)  StoRM configuration In order to create and manage a list of banned users, StoRM can be configured to use ARGUS authorization system. The Argus authorization service allows administrators to define policies that answer questions like Can user X perform action Y on resource Z at this time? See Argus twiki to get more information about this framework. StoRM doesn’t integrate all the services provided by Argus. It allows only to define a list of banned users.\nSupposing you have installed StoRM on a single host, modify your storm-frontend-server.conf StoRM Frontend configuration file to integrate ARGUS service. It’s necessary to instruct the Frontend to communicate with Argus PEP server.\nYou need to specify the complete service endpoint of Argus PEP server:\nargus-pepd-endpoint=https://omii005-vm02.cnaf.infn.it:8154/authz Then you have to choose an entity identifier for StoRM service (it’s a string that represents the entity-id that you’ll use for each StoRM’s Argus policy):\nargus.resource-id=storm and enable Frontend’s user blacklisting with:\ncheck.user.blacklisting=true An alternative is to use the StoRM Frontend puppet module. You can modify the manifest.pp file by adding the same parameters in the StoRM Frontend class:\nclass { 'storm::frontend': ... check_user_blacklisting =\u003e true, argus_pepd_endpoint =\u003e 'https://omii005-vm02.cnaf.infn.it:8154/authz', argus_resource_id =\u003e 'storm', } The StoRM configuration is completed. But before running the configuration it’s necessary to define at least a policy for every VO that your StoRM instance supports. To do this, we have to add some valid policies. We can write a file in Simplified Policy Language and then import it or we can use the pap-admin CLI directly. For example, if your StoRM instance supports dteam VO, you have to write the following policy:\n$ pap-admin add-policy permit --resource \"storm\" --action \".*\" vo=\"dteam\" $ pap-admin list-policies default (local): resource \"storm\" { action \".*\" { rule permit { vo=\"dteam\" } } } See Simplified Policy Language guide to learn how to write valid Argus policies. If you have a storage area not owned by a VO but readable and writable with a particular x509 certificate (see this example), you can add an ARGUS policy as follow:\n$ pap-admin add-policy permit --resource \"storm\" --action \".*\" subject-issuer=\"CN=Test1, O=IGI, C=IT\" $ pap-admin list-policies default (local): resource \"storm\" { action \".*\" { rule permit { subject-issuer=\"CN=Test1, O=IGI, C=IT\" } } } Finally, if you want to ban a particular user you can add a policy as follow:\n$ pap-admin add-policy deny --resource \".*\" --action \".*\" subject=\"CN=Test0, O=IGI, C=IT\" $ pap-admin list-policies default (local): resource \".*\" { action \".*\" { rule deny { subject=\"CN=Test0, O=IGI, C=IT\" } } } or you can simply do:\n$ pap-admin ban subject \"CN=Test0, O=IGI, C=IT\" Save all these policies on a file and import it via pap-admin command add-policies-from-file:\n$ pap-admin add-policies-from-file \u003cfilepath\u003e This command append the contained policies so, if you want to replace the existing policies, you have to do a:\n$ pap-admin rap before, and then import your file. Clear the cache and reload the policies to finish:\n$ pepdctl clearResponseCache $ pdpctl reloadPolicy Trying to do a srmLs with the banned certificate we get:\nGfal  ClientSRM   $ gfal-ls srm://omii005-vm03.cnaf.infn.it:8444/test.vo/ gfal-ls error: 13 (Permission denied) - srm-ifce err: Permission denied, err: [SE][Ls][SRM_AUTHORIZATION_FAILURE] httpg://omii005-vm03.cnaf.infn.it:8444/srm/managerv2: Request authorization error: user is blacklisted. $ clientSRM ls -e omii005-vm03.cnaf.infn.it:8444 -s srm://omii005-vm03.cnaf.infn.it:8444/test.vo ============================================================ Sending Ls request to: omii005-vm03.cnaf.infn.it:8444 Before execute: Afer execute: Request Status Code 3 Poll Flag 0 ============================================================ Request status: statusCode=\"SRM_AUTHORIZATION_FAILURE\"(3) explanation=\"Request authorization error: user is blacklisted.\" ============================================================ SRM Response: ============================================================  with the following logs:\n11/30 14:43:35.720 Thread 7 - INFO [523dfd3f-aae1-4ec2-bafd-0cdc0e223fc2]: process_request : Connection from 131.154.100.192 11/30 14:43:35.735 Thread 7 - INFO [523dfd3f-aae1-4ec2-bafd-0cdc0e223fc2]: ns1__srmLs : Request: Ls. IP: 131.154.100.192. Client DN: /C=IT/O=IGI/CN=test0 11/30 14:43:35.813 Thread 7 - ERROR [523dfd3f-aae1-4ec2-bafd-0cdc0e223fc2]: ns1__srmLs : Request authorization error: user is blacklisted. 11/30 14:43:35.813 Thread 7 - INFO [523dfd3f-aae1-4ec2-bafd-0cdc0e223fc2]: Result for request 'Ls' is 'SRM_AUTHORIZATION_FAILURE' ","categories":"","description":"Example of how to avoid a specific user to access a storage-area through Argus authorization system.\n","excerpt":"Example of how to avoid a specific user to access a storage-area …","ref":"/storm-docs/docs/getting-started/frontend/argus-ban-user-example/","tags":"","title":"Argus blacklisting"},{"body":"SRM clients StoRM distributes clients for contacting SRM services. These clients are not the StoRM clients but the general purpose SRM clients and can be use to contact any Web Service implementing the SRM interface. This document provides some examples of the main functionalities of the SRM specification v2.2.\nBasic concepts In order to use the SRM services you need:\n A valid personal certificate (so you have to do a voms-proxy-init or a grid-proxy-init). A SRM endpoint to contact. to be authorized to contact the SRM.  SRM endpoint Generally a SRM endpoint is in the form:\nhttpg://host:port/service_path (or http, https).  The endpoint that we use in all the following examples is:\nhttpg://ibm139.cnaf.infn.it:8444/  For this endpoint the service path can be left blank.\nSURL A file (or a directory) is identified by a SURL that has the following format:\nsrm://host[:port]/[soap_end_point_path?SFN=]site_file_name  where […] means optional. The sfile ite_file_name must begin with a StFN root. The StFN root must be agreed with the SRM administrator. An example of SURL is:\nsrm://ibm139.cnaf.infn.it:8444/infngrid/test_file.txt  In this example the StFN root is infngrid and the file name is test_file.txt. If the SRM requires a service path, the previous example becomes:\nsrm://ibm139.cnaf.infn.it:8444/srm/managerv2?SFN=/infngrid/test_file.txt  where the service path is srm/managerv2. According to the last example the SRM endpoint should be:\nhttpg://ibm139.cnaf.infn.it:8444/srm/managerv2  StoRM clientSRM The clientSRM is the binary of the SRM v2.2 Command Line Client. The client can be used to interact with any SRM v2.2 endpoint.\nInstallation To install storm-srm-client, install its metapackage RPM: emi-storm-srm-client-mp\n$ yum install emi-storm-srm-client-mp  Examples The following are several examples of clientSRM use.\nsrmPing Check the state of the SRM.\nThis function works as an “are you alive” type of call. The version of the SRM specification implemented by the server is returned. To ping a SRM server using the provided SRM client type:\n$ clientSRM Ping -e httpg://ibm139.cnaf.infn.it:8444/  The server responds with the implemented SRM version:\n============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"SRM server successfully contacted\" ============================================================ SRM Response: versionInfo=\"v2.2\" otherInfo=NULL ============================================================  srmMkdir Create a directory in a local SRM space.\nTo create a directory using the provided SRM client type:\n# clientSRM mkdir -e httpg://ibm139.cnaf.infn.it:8444/ -s srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/  And you will get something like this:\n============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"Directory created with success\" ============================================================  srmRmdir Remove an empty directory in a local SRM space.\nTo remove an empty directory using the provided SRM client type:\n# clientSRM Rmdir -e httpg://ibm139.cnaf.infn.it:8444/ -s srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/ ============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"Directory removed with success!\" ============================================================  srmRm Remove SURLs in the storage system.\nTo remove the file test_file.txt inside the directory test_dir type:\n# clientSRM Rm -e httpg://ibm139.cnaf.infn.it:8444/ -s srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file.txt ============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"All files removed\" ============================================================ SRM Response: arrayOfFileStatuses (size=1) [0] SURL=\"srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file.txt\" [0] status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"File removed\" ============================================================  srmLs Return a list of files with a basic information.\nTo list the content of the directory test_dir together with all its subdirectories type:\n$ clientSRM ls -e httpg://ibm139.cnaf.infn.it:8444/ -s srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/ -l ============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"All requests successfully completed\" ============================================================ SRM Response: details (size=3) [0] SURL=\"srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir\" [0] status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"Successful request completion.\" [1] SURL=\"srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file01.txt\" [1] size=150000 [1] lastModificationTime=\"Wed Jan 14 11:50:09 CET 1970\" [1] status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"Successful request completion.\" [2] SURL=\"srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file02.txt\" [2] size=14 [2] lastModificationTime=\"Wed Jan 14 11:50:09 CET 1970\" [2] status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"Successful request completion.\" ============================================================  srmMv Move a file from one SRM local path to another SRM local path.\nTo move the file test_file00.txt from the directory test_dir to the directory test_dir/sub_test_dir type:\n$ clientSRM mv -e httpg://ibm139.cnaf.infn.it:8444/ -s srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file00.txt -t srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/sub_test_dir/test_file00.txt ============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"SURL moved with success\" ============================================================  srmReserveSpace Reserve a space in advance for the upcoming requests to get some guarantee on the file management.\nTo reserve 10MB of space type:\n$ clientSRM reservespace -e httpg://ibm139.cnaf.infn.it:8444/ -a 10000000 -b 5000000 ============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"Space Reservation done\" ============================================================ SRM Response: sizeOfTotalReservedSpace=10000000 sizeOfGuaranteedReservedSpace=5000000 lifetimeOfReservedSpace=86400 spaceToken=\"9A5294CB-1201-B2C2-839A-646DDA7D4831\" ============================================================  The returned space token has to be used in all the requests that work on this reserved space.\nsrmGetSpaceMetadata Get information of a space, for which a space token must be provided.\nFor instance, to retrieve information on the space reserved in the previous example we type:\n$ clientSRM getspacemetadata -e httpg://ibm139.cnaf.infn.it:8444/ -s 9A5294CB-1201-B2C2-839A-646DDA7D4831 ============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"All requested Space Information returned successfully.\" ============================================================ SRM Response: arrayOfSpaceDetails (size=1) [0] spaceToken=\"9A5294CB-1201-B2C2-839A-646DDA7D4831\" [0] status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"Valid space token\" [0] owner=\"/C=IT/O=INFN/OU=Personal Certificate/L=CNAF/CN=Alberto Forti\" [0] totalSize=10000000 [0] guaranteedSize=5000000 [0] unusedSize=10000000 [0] lifetimeAssigned=86400 [0] lifetimeLeft=86180 ============================================================  srmPrepareToPut Write files into the storage.\nUpon the client’s request, SRM prepares a TURL so that client can write data into the TURL. Lifetime (pinning expiration time) is assigned on the TURL. When a specified target space token is provided, the files will be located finally in the targeted space associated with the space token. It is an asynchronous operation, and a request token is returned. The status may be checked through srmStatusOfPutRequest with the returned request token. To write an empty file of 150000 bytes inside the directory test_dir type:\n$ clientSRM ptp -e httpg://ibm139.cnaf.infn.it:8444/ -s srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file00.txt,150000 -p ============================================================ Polling request status: Current status: SRM_REQUEST_QUEUED (Ctrl+c to stop). Current status: SRM_REQUEST_INPROGRESS (Ctrl+c to stop)...... ============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"All chunks successfully handled!\" ============================================================ SRM Response: remainingTotalRequestTime=0 arrayOfFileStatuses (size=1) [0] SURL=\"srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file00.txt\" [0] status: statusCode=\"SRM_SPACE_AVAILABLE\"(24) explanation=\"srmPrepareToPut successfully handled!\" [0] TURL=\"gsiftp://ibm139.cnaf.infn.it:2811/gpfs/infngrid/test_dir/test_file00.txt\" ============================================================  Since the srmPrepareToPut operation is asynchronous, the “-p” option forces the client to poll the SRM server until the request is managed. The file can be filled with the desired data using some transfer service, such as gridFTP, and specifying as a destination the returned TURL.\nsrmPutDone Trigger the data transfering.\nAfter a SrmPrepareToPut, the TURL returned can be used to transfer data using the selected protocol. When the transfer has been successfully executed, the SrmPutDone request has to be done in order to tell the system the transfer is finished. As parameter for the SrmPutDone the SrmPrepareToPut REQUESTTOKEN has to be specified. It can be found in the parameter returned by the SrmPrepareToPut\n$ clientSRM pd -e httpg://ibm139.cnaf.infn.it:8444/ -s srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file00.txt,150000 -t 122f7d26-6d02-4024-89c3-9921d35b791b  srmStatusOfPrepareToPutRequest Check the status of the previously requested srmPrepareToPut.\nRequest token from srmPrepareToPut must be provided. To check the status of the srmPrepareToPut operation of the previous example type:\n$ clientSRM statusptp -e httpg://ibm139.cnaf.infn.it:8444/ -t 122f7d26-6d02-4024-89c3-9921d35b791b -vN ============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"All chunks successfully handled!\" ============================================================ SRM Response: remainingTotalRequestTime=0 arrayOfFileStatuses (size=1) [0] SURL=\"srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file00.txt\" [0] status: statusCode=\"SRM_SPACE_AVAILABLE\"(24) explanation=\"srmPrepareToPut successfully handled!\" [0] TURL=\"gsiftp://ibm139.cnaf.infn.it:2811/gpfs/infngrid/test_dir/test_file00.txt\" ============================================================  srmPrepareToGet Bring files online upon the client’s request and assign TURL so that client can access the file.\nLifetime (pinning expiration time) is assigned on the TURL. An example:\n$ clientSRM ptg -e httpg://ibm139.cnaf.infn.it:8444/ -s srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file01.txt -p ============================================================ Polling request status: Current status: SRM_REQUEST_QUEUED (Ctrl+c to stop). Current status: SRM_REQUEST_INPROGRESS (Ctrl+c to stop)....... ============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"Request handled!\" ============================================================ SRM Response: requestToken=\"51218a32-edc3-4f14-9ae9-89eec2b52146\" remainingTotalRequestTime=0 arrayOfFileStatuses (size=1) [0] sourceSURL=\"srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file01.txt\" [0] fileSize=150000 [0] status: statusCode=\"SRM_FILE_PINNED\"(22) explanation=\"srmPrepareToGet successfully handled!\" [0] transferURL=\"gsiftp://ibm139.cnaf.infn.it:2811/gpfs/infngrid/test_dir/test_file01.txt\" ============================================================  The file test_file01.txt is pinned and the user can transfer it, out of the SE, by executing a gridFTP specifying the returned transferURL as source file.\nsrmStatusOfGetRequest Check the status of the previously requested srmPrepareToGet.\nRequest token from srmPrepareToGet must be provided. To check the status of the srmPrepareToGet request of the previous example:\n$ clientSRM statusptg -e httpg://ibm139.cnaf.infn.it:8444/ -t 51218a32-edc3-4f14-9ae9-89eec2b52146 ============================================================ Request status: statusCode=\"SRM_SUCCESS\"(0) explanation=\"Request handled!\" ============================================================ SRM Response: remainingTotalRequestTime=0 arrayOfFileStatuses (size=1) [0] sourceSURL=\"srm://ibm139.cnaf.infn.it:8444/infngrid/test_dir/test_file01.txt\" [0] fileSize=150000 [0] status: statusCode=\"SRM_FILE_PINNED\"(22) explanation=\"srmPrepareToGet successfully handled!\" [0] transferURL=\"gsiftp://ibm139.cnaf.infn.it:2811/gpfs/infngrid/test_dir/test_file01.txt\" ============================================================ ","categories":"","description":"","excerpt":"SRM clients StoRM distributes clients for contacting SRM services. …","ref":"/storm-docs/docs/user-guides/client-srm/","tags":"","title":"ClientSRM User Guide"},{"body":"StoRM is a lightweight storage resource manager (SRM) solution developed at INFN, which powers the Italian Tier-1 data center at INFN-CNAF, as well as more than 30 other sites.\nThe SRM (“Storage Resource Manager”) is a protocol for Storage Resource Management. The SRM protocol does not do any data transfer. The protocol is used to ask a Mass Storage System (MSS) to make a file ready for transfer, or to create space in a disk cache to which a file can be uploaded. The file is then transferred to or from a Transfer URL or TURL.\nRead more:\n The Storage Resource Manager Interface Specification Version 2.2  StoRM typical deployment StoRM implements the SRM version 2.2 data management specification and is typically deployed on top of a cluster file system like IBM GPFS. StoRM has a layered architecture (Figure 1), split between two main components: the StoRM frontend and backend services. The StoRM frontend service implements the SRM interface exposed to client applications and frameworks. The StoRM backend service implements the actual storage management logic by interacting directly with the underlying file system. Data transfer is provided by GridFTP, HTTP/WebDAV and XRootD services accessing directly the file system underlying the StoRM deployment. StoRM WebDAV, besides HTTP data transfer functionality, also provides a WebDAV-based data management interface.\nStoRM supports tape through integration with GEMSS, a tape library manager component also developed at INFN-CNAF.\nStoRM provides flexible AuthN/Z support:\n VOMS \u0026 OAuth tokens (WebDAV \u0026 CDMI) File access control is enforced via POSIX ACLs  ","categories":"","description":"StoRM is a storage resource manager for disk based storage systems\n","excerpt":"StoRM is a storage resource manager for disk based storage systems\n","ref":"/storm-docs/docs/overview/","tags":"","title":"StoRM Architecture Overview"},{"body":"The file /etc/storm/backend-server/storm.properties contains StoRM Backend configuration. This file is read at service startup. Your changes will be applied after a service restart.\n Since StoRM v1.12.0, a huge name refactoring has been done. This new version is called ‘2.0’. In case the latest version of storm.properties is not recognized during bootstrap phase, StoRM Backend tries to convert it to the latest version and complete the bootstrap. The converted properties set is also saved to another file. Check StoRM backend log for more details.\n The full set of currently supported configuration properties are shown below by categories.\nSRM service properties    Property Description     srm_endpoints List of the accepted StoRM SRM endpoints. Each endpoint is composed by host (mandatory) and port (optional). This list is used by StoRM to understand if a SURL should be managed or not. The first endpoint of this list is considered the default public SRM endpoint. Example:  srm_endpoints[0].host: fe01-storm.example.org  srm_endpoints[0].port: 8444  srm_endpoints[1].host: fe02-storm.example.org  srm_endpoints[1].port: 8444  It replaces the use of storm.service.FE-public.hostname, storm.service.port, storm.service.SURL.endpoint and storm.service.SURL.default-ports. It’s initialized with one endpoint with the local FQDN as host and 8444 as port.    Deprecated properties:\nstorm.service.FE-public.hostname, storm.service.port, storm.service.SURL.endpoint and storm.service.SURL.default-ports\nDatabase connection properties    Property Description     db.username The connection user name to be passed to the JDBC driver to establish a connection. Default value: storm. It replaces storm.service.request-db.username.   db.password The connection password to be passed to the JDBC driver to establish a connection. Default value: storm. It replaces storm.service.request-db.passwd.   db.hostname Fully Qualified Domain Name of database hostname. It’s initialized with the local FQDN. It replaces storm.service.request-db.host.   db.port Database connection URL port. Default value: 3306   db.properties The connection properties that will be sent to the JDBC driver when establishing new connections. Format of the string must be [propertyName=property;]* NOTE - The “user” and “password” properties will be passed explicitly, so they do not need to be included here. Default value: “serverTimezone=UTC\u0026autoReconnect=true”. It replaces storm.service.request-db.properties.    Deprecated properties:\nstorm.service.request-db.host, storm.service.request-db.username, storm.service.request-db.passwd and storm.service.request-db.properties\nDatabase connection pool properties    Property Description     db.pool.size The maximum number of active connections that can be allocated from database connection pool at the same time, or negative for no limit. Default value: -1   db.pool.min_idle The minimum number of connections that can remain idle in the pool, without extra ones being created, or zero to create none. Default value: 10   db.pool.max_wait_millis The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception, or -1 to wait indefinitely. Default value: 5000   db.pool.test_on_borrow The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and we will attempt to borrow another. Default value: true   db.pool.test_while_idle The indication of whether objects will be validated by the idle object evictor (if any). If an object fails to validate, it will be dropped from the pool. Default value: true    Deprecated properties:\nasynch.db.ReconnectPeriod, asynch.db.DelayPeriod, persistence.internal-db.connection-pool.maxActive, persistence.internal-db.connection-pool.maxWait\nREST server properties    Property Description     rest.port Internal REST services endpoint port. Default value: 9998. It replaces storm.rest.services.port.   rest.max_threads Internal REST services endpoint max active requests. Default value: 100. It replaces storm.rest.services.maxthreads.   rest.max_queue_size Internal REST services endpoint max queue size of accepted requests. Default value: 1000. It replaces storm.rest.services.max_queue_size.    Deprecated properties:\nstorm.rest.services.port, storm.rest.services.maxthreads and storm.rest.services.max_queue_size\nXMLRPC server properties StoRM Frontend performs a direct communication to the Backend using a RPC approach, based on the XML-RPC protocol. XML-RPC is a simple protocol to exchange XML structured data over HTTP. The Backend provides an XML-RPC server and one or more Frontends acts as client.\n   Property Description     xmlrpc.port Port to listen on for incoming XML-RPC connections from Frontends(s). Default value: 8080. It replaces synchcall.xmlrpc.unsecureServerPort.   xmlrpc.max_threads Number of threads managing XML-RPC connection from Frontends(s). A well sized value for this parameter have to be at least equal to the sum of the number of working threads in all FrontEend(s). Default value: 256. It replaces synchcall.xmlrpc.maxthread.   xmlrpc.max_queue_size Max number of accepted and queued XML-RPC connection from Frontends(s). Default value: 1000. It replaces synchcall.xmlrpc.max_queue_size.    Deprecated properties:\nsynchcall.xmlrpc.unsecureServerPort, synchcall.xmlrpc.maxthread and synchcall.xmlrpc.max_queue_size.\nREST/XMLRPC security properties    Property Description     security.enabled Whether the backend will require a token to be present for accepting XML-RPC requests. Default value: true. It replaces synchcall.xmlrpc.security.enabled.   security.token The token that the backend will require to be present for accepting XML-RPC requests. Default value: secret. It replaces synchcall.xmlrpc.security.token.    Deprecated properties:\nsynchcall.xmlrpc.security.enabled and synchcall.xmlrpc.security.token.\nDisk Usage service properties Disk Usage service is used for the periodic update of the used-space of all the storage spaces that are not GPFS-with-quota-enabled. Running a periodic ‘du -s -b’ on the top of the storage spaces root directory, the used-space stored into the database is updated. By default, the service is disabled.\n   Property Description     du.enabled Enable disk usage service. Default value: false. It replaces storm.service.du.enabled.   du.initial_delay The initial delay before the service is started (seconds). Default value: 60. It replaces storm.service.du.delay.   du.tasks_interval The interval in seconds between successive run. Default value: 86400. It replaces storm.service.du.interval.   du.parallel_tasks_enabled Enable parallel execution of the expected du. Default value: false.    Deprecated variables:\nstorm.service.du.enabled, storm.service.du.delay and storm.service.du.interval.\nAdvanced files and directories settings    Property Description     directories.automatic_creation Enable/disable the automatic directory creation during srmPrepareToPut requests. Default value: false. It replaces directory.automatic-creation.   directories.writeperm Enable/disable write permission on directory created through srmMkDir requests. Default value: false   files.default_filesize Default FileSize. Default value: 1000000. It replaces fileSize.default.   files.default_lifetime Default FileLifetime in seconds used for VOLATILE file in case of SRM request. Default value: 259200. It replaces fileLifetime.default.   files.default_overwrite Default file overwrite mode to use upon srmPrepareToPut requests. Possible values are N (Never), A (Always), D (when files Differs). Default value: A. It replaces default.overwrite.   files.default_storagetype Default File Storage Type to be used for srmPrepareToPut requests. Possible values are V (Volatile), P (Permanent) and D (Durable). Default value: P. It replaces default.storagetype.    Deprecated variables:\ndirectory.automatic-creation, default.overwrite, default.storagetype, fileLifetime.default, fileSize.default\nAdvanced configuration    Property Description     Sanity Checks    sanity_checks_enabled Enable/disable sanity checks during bootstrap phase.   Advanced Configuration    pinlifetime.default Default pinLifetime in seconds used for pinning files in case of srmPrepareToPut or srmPrapareToGet requests   pinlifetime.maximum Maximum allowed value for pinLifeTime. Values beyond the max will be dropped to max value.   extraslashes.file Add extra slashes after the “authority” part of a TURL for FILE protocol.   extraslashes.rfio Add extra slashes after the “authority” part of a TURL for RFIO protocol.   extraslashes.gsiftp Add extra slashes after the “authority” part of a TURL for GSIFTP protocol.   extraslashes.root Add extra slashes after the “authority” part of a TURL for ROOT protocol.   gc_pinnedfiles_cleaning_delay Initial delay in seconds before starting the garbage collector thread   gc_pinnedfiles_cleaning_interval Garbage Collector time interval in seconds.   files.default_filesize Default FileSize.   files.default_lifetime Default FileLifetime in seconds used for VOLATILE file in case of SRM request.   files.default_overwrite Default file overwrite mode to use upon srmPrepareToPut requests. Possible values are N (Never), A (Always), D (when files Differs).   files.default_storagetype Default File Storage Type to be used for srmPrepareToPut requests. Possible values are V (Volatile), P (Permanent) and D (Durable)   requests_scheduler.core_pool_size Crusher Scheduler worker pool base size.   requests_scheduler.max_pool_size Crusher Schedule worker pool max size.   requests_scheduler.queue_size Request queue maximum size.   ptp_scheduler.core_pool_size PrepareToPut worker pool base size.   ptp_scheduler.max_pool_size PrepareToPut worker pool max size.   ptp_scheduler.queue_size PrepareToPut request queue maximum size.   ptg_scheduler.core_pool_size PrepareToGet worker pool base size.   ptg_scheduler.max_pool_size PrepareToGet worker pool max size.   ptg_scheduler.queue_size PrepareToGet request queue maximum size.   bol_scheduler.core_pool_size BringOnline worker pool base size.   bol_scheduler.max_pool_size BringOnline Worker pool max size.   bol_scheduler.queue_size BringOnline request queue maximum size.   requests_picker_agent.delay Initial delay before starting to pick requests from the DB, in seconds.   requests_picker_agent.interval Polling interval in seconds to pick up new SRM requests.   requests_picker_agent.max_fetched_size Maximum number of requests picked up at each polling time.   synch_ls.max_entries Maximum number of entries returned by an srmLs call. Since in case of recursive srmLs results can be in order of million, this prevent a server overload.   synch_ls.default_all_level_recursive Default value for the parameter “allLevelRecursive” of the srmLS request.   synch_ls.default_num_levels Default value for the parameter “numOfLevels” of the srmLS request.   synch_ls.default_offset Default value for the parameter “offset” of the LS request.   completed_requests_agent.enabled Enable/Disable Garbage Collector   completed_requests_agent.delay Initial delay before starting the requests garbage collection process, in seconds.   completed_requests_agent.interval Time interval for between two requests in garbage collection. In seconds.   completed_requests_agent.purge_size Number of requests removed at each run. Every run purge max 800 requests in final status   completed_requests_agent.purge_age Time after that the GC consider a terminated request as garbage in seconds   inprogress_requests_agent.delay Delay on starting agent. In seconds.   inprogress_requests_agent.interval Expired-Put-Requests-Agent transits expired put requests to a final state. A put request is expired if pinLifetime is reached. This interval is the interval between two agent executions. In seconds.   inprogress_requests_agent.ptp_expiration_time Time in seconds to consider an in-progress ptp request as expired.   skip_ptg_acl_setup Skip ACL setup for PtG requests   hearthbeat.bookkeeping_enabled    hearthbeat.performance_measuring_enabled    hearthbeat.period    hearthbeat.performance_logbook_time_interval    hearthbeat.performance_glance_time_interval    info_quota_refresh_period GPFS Quota Manager refresh period (in seconds).   http_turl_prefix URL path prefix for the generated HTTP TURLs. Example: ‘/subpath’.   server_pool_status_check_timeout Timeout for status requests on GridFTP and HTTP endpoints used to generate TURLs.   abort_maxloop    ping_properties_filename The name of a properties file with extra key=value properties that will be returned during Ping requests.    ","categories":"","description":"The storm.properties file contains the StoRM Backend service configuration. In this section you will find all the properties that administrators can tune.\n","excerpt":"The storm.properties file contains the StoRM Backend service …","ref":"/storm-docs/docs/getting-started/backend/storm.properties/","tags":"","title":"Configure StoRM Backend service"},{"body":"","categories":"","description":"The complete list of StoRM Backend release notes.\n","excerpt":"The complete list of StoRM Backend release notes.\n","ref":"/storm-docs/releases/backend/","tags":"","title":"StoRM Backend Releases"},{"body":"User creation You can use the following commands to create StoRM user:\nuseradd -M storm The option -M means ‘without an home directory’. You could also use specific user and group IDs as follows:\nuseradd -M storm -u 1234 -g 1234 In alternative, you could use cnafsd-storm Puppet module by using storm::users class as follows:\n# add default storm and edguser users and groupsinclude storm::usersclass { 'storm::users':# The list of defined users. In this case: storm and edguser have been defined. # Refer to puppetlabs/accounts Accounts::User::Hash # https://github.com/puppetlabs/puppetlabs-accounts/blob/main/types/user/hash.pp users =\u003e { 'edguser' =\u003e { 'comment' =\u003e 'Edguser user', 'groups' =\u003e [ edguser, storm, ], 'uid' =\u003e '1200', 'gid' =\u003e '1200', 'home' =\u003e '/home/edguser', }, 'storm' =\u003e { 'comment' =\u003e 'StoRM user', 'groups' =\u003e [ storm, edguser, ], 'uid' =\u003e '1000', 'gid' =\u003e '1000', 'home' =\u003e '/home/storm', }, },# Any other group different from storm and edguser # Refer to puppetlabs/accounts Accounts::Group::Hash # https://github.com/puppetlabs/puppetlabs-accounts/blob/main/types/group/hash.pp groups =\u003e { },}Keep UIDs and GIDs aligned for StoRM users and groups on distributed deployments (i.e. when the services are installed on different machines).\nUser file limits It’s recommended to raise the number of open files for storm user. Put these settings in /etc/security/limits.conf or in a file contained in the /etc/security/limits.d directory (recommended):\nstorm hard nofile 65535 storm soft nofile 65535 Edit the total amount of opened files as your needed.\nYou can also use cnafsd-storm Puppet module by editing storm::backend::storm_limit_nofile property (default value: 65535).\nStorage Area’s permissions All the Storage Areas managed by StoRM needs to be owned by storm user. This means that, for example, the storage-area test root directory permissions must be:\ndrwxr-x---+ 2 storm storm The site administrator has to take care of it. To set the correct permissions on a storage area, you can launch the following commands (assuming that storm runs as user storm, which is the default):\nchown -RL storm:storm \u003csa-root-directory\u003e chmod -R 750 \u003csa-root-directory\u003e Site administrator must also make traversable by other users the parent directories of each storage-area root directory (that’s usually the same directory for all the storage-areas):\nchmod o+x \u003csa-root-directory-parent\u003e ","categories":"","description":"StoRM services run as user **storm**. This user is created during packages installation but it's a good practice to initialize it before.\n","excerpt":"StoRM services run as user **storm**. This user is created during …","ref":"/storm-docs/docs/getting-started/storm-user/","tags":"","title":"StoRM user and permissions"},{"body":"Mapping SURLs to TURLs Information about storage managed by StoRM is stored in a configuration file named namespace.xml located at /etc/storm/backend-server/ on StoRM Backend host. One of the information stored into namespace.xml file is what is needed to perform the mapping functionality. The mapping functionality is the process of retrieving or building the transport URL (TURL) of a file addressed by a Site URL (SURL) together with grid user credential.\nThe following schema shows the different schema of SURL and TURL:\nA couple of quick concepts from SRM:\n The SURL is the logical identifier for a local data entity Data access and data transfer are made through the TURLs The TURL identify a physical location of a replica SRM services retrieve the TURL from a namespace database (like DPNS component in DPM) or build it through other mechanisms (like StoRM)  In StoRM, the mapping functionality is provided by the namespace component (NS).\n The Namespace component works without a database. The Namespace component is based on an XML configuration. It relies on the physical storage structure.  The basic features of the namespace component are:\n The configuration is modular and structured (representation is based on XML) An efficient structure of namespace configuration lives in memory. No access to disk or database is performed The loading and the parsing of the configuration file occurs:  at start-up of the back-end service when configuration file is modified    StoRM is different from the other solution, where typically, for every SRM request a query to the data base have to be done in order to establish the physical location of file and build the correct transfer URL. The namespace functions relies on two kind of parameters for mapping operations derived from the SRM requests, that are:\n the grid user credential (a subject or a service acting on behalf of the subject) the SURL  The Fig.4 shows the main concepts of Namespace Component:\n NS-Filesystem: is the representation of a Storage Area Mapping rule: represents the basic rule for the mapping functionalities Approachable rule: represents the coarse grain access control to the Storage Area.  This is and example of the FS element:\n\u003cfilesystem name=\"dteam-FS\" fs_type=\"ext3\"\u003e \u003cspace-token-description\u003eDTEAM_TOKEN\u003c/space-token-description\u003e \u003croot\u003e/storage/dteam\u003c/root\u003e \u003cfilesystem-driver\u003eit.grid.storm.filesystem.swig.posixfs\u003c/filesystem-driver\u003e \u003cspacesystem-driver\u003eit.grid.storm.filesystem.MockSpaceSystem\u003c/spacesystem-driver\u003e \u003cstorage-area-authz\u003e \u003cfixed\u003epermit-all\u003c/fixed\u003e \u003c/storage-area-authz\u003e \u003cproperties\u003e \u003cRetentionPolicy\u003ereplica\u003c/RetentionPolicy\u003e \u003cAccessLatency\u003eonline\u003c/AccessLatency\u003e \u003cExpirationMode\u003eneverExpire\u003c/ExpirationMode\u003e \u003cTotalOnlineSize unit=\"GB\" limited-size=\"true\"\u003e291\u003c/TotalOnlineSize\u003e \u003cTotalNearlineSize unit=\"GB\"\u003e0\u003c/TotalNearlineSize\u003e \u003c/properties\u003e \u003ccapabilities\u003e \u003caclMode\u003eAoT\u003c/aclMode\u003e \u003cdefault-acl\u003e \u003cacl-entry\u003e \u003cgroupName\u003elhcb\u003c/groupName\u003e \u003cpermissions\u003eRW\u003c/permissions\u003e \u003c/acl-entry\u003e \u003c/default-acl\u003e \u003ctrans-prot\u003e \u003cprot name=\"file\"\u003e \u003cschema\u003efile\u003c/schema\u003e \u003c/prot\u003e \u003cprot name=\"gsiftp\"\u003e \u003cid\u003e0\u003c/id\u003e \u003cschema\u003egsiftp\u003c/schema\u003e \u003chost\u003egsiftp-dteam-01.cnaf.infn.it\u003c/host\u003e \u003cport\u003e2811\u003c/port\u003e \u003c/prot\u003e \u003cprot name=\"gsiftp\"\u003e \u003cid\u003e1\u003c/id\u003e \u003cschema\u003egsiftp\u003c/schema\u003e \u003chost\u003egsiftp-dteam-02.cnaf.infn.it\u003c/host\u003e \u003cport\u003e2811\u003c/port\u003e \u003c/prot\u003e \u003cprot name=\"rfio\"\u003e \u003cschema\u003erfio\u003c/schema\u003e \u003chost\u003erfio-dteam.cnaf.infn.it\u003c/host\u003e \u003cport\u003e5001\u003c/port\u003e \u003c/prot\u003e \u003cprot name=\"root\"\u003e \u003cschema\u003eroot\u003c/schema\u003e \u003chost\u003eroot-dteam.cnaf.infn.it\u003c/host\u003e \u003cport\u003e1094\u003c/port\u003e \u003c/prot\u003e \u003c/trans-prot\u003e \u003cpool\u003e \u003cbalance-strategy\u003eround-robin\u003c/balance-strategy\u003e \u003cmembers\u003e \u003cmember member-id=\"0\"\u003e\u003c/member\u003e \u003cmember member-id=\"1\"\u003e\u003c/member\u003e \u003c/members\u003e \u003c/pool\u003e \u003c/capabilities\u003e \u003cdefaults-values\u003e \u003cspace lifetime=\"86400\" type=\"volatile\" guarsize=\"291\" totalsize=\"291\"/\u003e \u003cfile lifetime=\"3600\" type=\"volatile\"/\u003e \u003c/defaults-values\u003e \u003c/filesystem\u003e Attributes meaning:\n \u003cfilesystem name=\"dteam-FS\" fs_type=\"ext3\"\u003e : The name is the element identifier. It identifies this Storage Area in the namespace domains. The fs_type is the type of the filesystem the Storage Area is built on. Possible values are: ext3, gpfs. Please note that ext3 stands for all generic POSIX filesystem (ext3, Lustre, etc.) \u003cspace-token-description\u003eDTEAM_TOKEN\u003c/space-token-description\u003e : Storage Area space token description. \u003croot\u003e/storage/dteam\u003c/root\u003e : Physical root directory of the Storage Area on the file system. \u003cfilesystem-driver\u003eit.grid.storm.filesystem.swig.posixfs\u003c/filesystem-driver\u003e : Driver loaded by the Backend for filesystem interaction. This driver is used mainly to set up ACLs on space and files. \u003cspacesystem-driver\u003eit.grid.storm.filesystem.MockSpaceSystem\u003c/spacesystem-driver\u003e Driver loaded by the Backend for filesystem interaction. This is driver is used to manage space allocation. (E.g. on GPFS it uses the gpfs_prealloc() call).  Storage Area properties \u003cproperties\u003e \u003cRetentionPolicy\u003ereplica\u003c/RetentionPolicy\u003e \u003cAccessLatency\u003eonline\u003c/AccessLatency\u003e \u003cExpirationMode\u003eneverExpire\u003c/ExpirationMode\u003e \u003cTotalOnlineSize unit=\"GB\" limited-size=\"true\"\u003e291\u003c/TotalOnlineSize\u003e \u003cTotalNearlineSize unit=\"GB\"\u003e0\u003c/TotalNearlineSize\u003e \u003c/properties\u003e in details:\n \u003cRetentionPolicy\u003ereplica\u003c/RetentionPolicy\u003e : Retention Policy of the Storage Area. Possible values are: replica, custodial. \u003cAccessLatency\u003eonline\u003c/AccessLatency\u003e : Access Latency of the Storage Area. Possible values: online, nearline. \u003cExpirationMode\u003eneverExpire\u003c/ExpirationMode\u003e : Expiration Mode of the Storage Area. Deprecated. \u003cTotalOnlineSize unit=\"GB\" limited-size=\"true\"\u003e291\u003c/TotalOnlineSize\u003e Total on-line size of the Storage Area in GigaBytes. In case the attribute limited-size=“true”, StoRM enforce this limit at SRM level. When the space used for the Storage Area is at least equal to the size specified, every further SRM request to write files will fail with SRM_NO_FREE_SPACE error code. \u003cTotalNearlineSize unit=\"GB\"\u003e0\u003c/TotalNearlineSize\u003e : Total near-line size of the Storage Area. This only means in case the Storage Area is in some way attached to a MSS storage system (such as TSM with GPFS).  Storage area capabilities \u003caclMode\u003eAoT\u003c/aclMode\u003e This is the ACL enforcing approach. Possible values are: AoT, JiT. In case of AheadOfTime(AoT) approach StoRM sets up a physical ACL on file and directories for the local group (gid) in which the user is mapped. (The mapping is done querying the LCMAPS service con the BE machine passing both user DN and FQANs). The group ACL remains for the whole lifetime of the file. In case of JustInTime(JiT) approach StoRM sets up and ACL for the local user (uid) the user is mapped. The ACL remains in place only for the lifetime of the SRM request, then StoRM removes it. (This is to avoid to grant access to pool account uid in case of reallocation on different users.)\n\u003cdefault-acl\u003e \u003cacl-entry\u003e \u003cgroupName\u003elhcb\u003c/groupName\u003e \u003cpermissions\u003eRW\u003c/permissions\u003e \u003c/acl-entry\u003e \u003c/default-acl\u003e This is the Default ACL list. A list of ACL entry (that specify a local user (uid) or group id (gid) and a permission (R,W,RW). This ACL are automatically by StoRM at each read or write request. Useful for use cases where experiment want to allow local access to file on group different than the one that made the SRM request operation.\n#### Access and Transfer protocol supported\nThe file protocol:\n\u003cprot name=\"file\"\u003e \u003cschema\u003efile\u003c/schema\u003e \u003c/prot\u003e The file protocol means the capability to perform local access on file and directory. If user performs an SRM request (srmPtG or srmPtP) specifying the file protocol, and it is supported by the selected Storage Area, StoRM return a TURL structured as:\nfile:///atlas/atlasmcdisk/filename  This TURL can be used through GFAL or other SRM clients to perform a direct access on the file.\n\u003cprot name=\"gsiftp\"\u003e \u003cid\u003e0\u003c/id\u003e \u003cschema\u003egsiftp\u003c/schema\u003e \u003chost\u003egridftp-dteam.cnaf.infn.it\u003c/host\u003e \u003cport\u003e2811\u003c/port\u003e \u003c/prot\u003e The gsiftp protocol:\nThe gsiftp protocol means the GridFTP transfer system from Globus widely adopted in many Grid environments. This capability element contains all the information about the GridFTP server to use with this Storage Area. Site administrator can decide to have different server (or pools of server) for different Storage Areas. The id is the server identifier to be used when defining a pool. The schema have to be gsiftp. host is the hostname of the server (or the DNS alias used to aggregate more than one server). The port is the GridFTP server port, typically 2811. If user performs an SRM request (srmPtG or srmPtP) specifying the gsiftp protocol, and it is supported by the selected Storage Area, StoRM return a TURL structured as:\ngsiftp://gridftp-dteam.cnaf.infn.it:2811/atlas/atlasmcdisk/filename.  The rfio protocol:\n\u003cprot name=\"rfio\"\u003e \u003cschema\u003erfio\u003c/schema\u003e \u003chost\u003erfio-dteam.cnaf.infn.it\u003c/host\u003e \u003cport\u003e5001\u003c/port\u003e \u003c/prot\u003e This capability element contains all the information about the rfio server to use with this Storage Area. Like for GridFTP, site administrator can decide to have different server (or pools of server) for different Storage Areas. The id is the server identifier. The schema have to be rfio. host is the hostname of the server (or the DNS alias used to aggregate more than one server). The port is the rfio server port, typically 2811. If user performs an SRM request (srmPtG or srmPtP) specifying the rfio protocol, and it is supported by the selected Storage Area, StoRM return a TURL structured as:\nrfio://rfio-dteam.cnaf.infn.it:5001/atlas/atlasmcdisk/filename.  The root protocol:\n\u003cprot name=\"root\"\u003e \u003cschema\u003eroot\u003c/schema\u003e \u003chost\u003eroot-dteam.cnaf.infn.it\u003c/host\u003e \u003cport\u003e1094\u003c/port\u003e \u003c/prot\u003e This capability element contains all the information about the root server to use with this Storage Area. Like for other protocols, site administrator can decide to have different server (or pools of server) for different Storage Areas. The id is the server identifier. The schema have to be root. host is the hostname of the server (or the DNS alias used to aggregate more than one server). The port is the root server port, typically 1094. If user performs an SRM request (srmPtG or srmPtP) specifying the root protocol, and it is supported by the selected Storage Area, StoRM return a TURL structured as:\nroot://root-dteam.cnaf.infn.it:1094/atlas/atlasmcdisk/filename.  Pool of protocol servers \u003cpool\u003e \u003cbalance-strategy\u003eround-robin\u003c/balance-strategy\u003e \u003cmembers\u003e \u003cmember member-id=\"0\"\u003e\u003c/member\u003e \u003cmember member-id=\"1\"\u003e\u003c/member\u003e \u003c/members\u003e \u003c/pool\u003e Here is defined a pool of protocol servers. Within the pool element pool members are declared identified by their id, the list of members have to be homogenious with respect to their schema. This id is the server identifier specified in the prot element. The balance-strategy represent the load balancing strategy with which the pool has to be managed. Possible values are: round-robin, smart-rr, random and weight.  NOTE: Protocol server pooling is currently available only for gsiftp servers.  Load balancing strategies details:\n  round-robin At each TURL construction request the strategy returns the next server following the round-robin approach: a circular list with an index starting from the head and incrementd at each request.\n  smart-rr An enhanced version of round-robin. The status of pool members is monitored and maintained in a cache. Cache entries has a validity life time that is refreshed when expired. If the member chosen by round-robin is marked as not responsive another iteration of round-robin is performed.\n  random At each TURL construction request the strategy returns a random member of the pool.\n  weight An enhanced version of round-robin. When a server is chosen the list index will not be moved forward (and the server will be choosen again in next request) for as many times as specified in its weight.\n  NOTE: The weight has to be specified in a weight element inside the member element:\n\u003cpool\u003e \u003cbalance-strategy\u003eWEIGHT\u003c/balance-strategy\u003e \u003cmembers\u003e \u003cmember member-id=\"0\"\u003e \u003cweight\u003e5\u003c/weight\u003e \u003c/member\u003e \u003cmember member-id=\"1\"\u003e \u003cweight\u003e1\u003c/weight\u003e \u003c/member\u003e \u003c/members\u003e \u003c/pool\u003e Storage space information default values \u003cdefaults-values\u003e \u003cspace lifetime=\"86400\" type=\"volatile\" guarsize=\"291\" totalsize=\"291\"/\u003e \u003cfile lifetime=\"3600\" type=\"volatile\"/\u003e \u003c/defaults-values\u003e Mapping rules A mapping rule define how a certain NS-Filesystem, that correspond to a Storage Area in SRM meaning of terms, is exposed in Grid:\n\u003cmapping-rules\u003e \u003cmap-rule name=\"dteam-maprule\"\u003e \u003cstfn-root\u003e/dteam\u003c/stfn-root\u003e \u003cmapped-fs\u003edteam-FS\u003c/mapped-fs\u003e \u003c/map-rule\u003e \u003c/mapping-rules\u003e The \u003cstfn-root\u003e is the path used to build SURL referring to that Storage Area. The mapping rule above define that the NS-Filesystem named dteam-FS has to be mapped in the /dteam SURL path. Following the NS-Filesystem element defined in the previous section, the SURL:\nsrm://storm-fe.cr.cnaf.infn.it:8444/dteam/testfile  following the root expressed in the dteam-FS NF-Filesystem element, is mapped in the physical root path on the file system:\n/storage/dteam  This approach works similar to an alias, from the SURL stfn-root path to the NS-Filesystem root.\nApproachable rules Approachable rules defines which users (or which class of users) can approach a certain Storage Area, always expressed as NS-Filesystem element. If a user can approach a Storage Area, he can use it for all SRM operations. If a user is not allowed to approach a Storage Area, and he try to specify it in any SRM request, he will receive an SRM_INVALID_PATH. In practics, if a user cannot approach a Storage Area, for him that specific path does not exists at all. Here is an example of approachable rule for the dteam-FS element:\n\u003capproachable-rules\u003e \u003capp-rule name=\"dteam-rule\"\u003e \u003csubjects\u003e \u003cdn\u003e*\u003c/dn\u003e \u003cvo-name\u003edteam\u003c/vo-name\u003e \u003c/subjects\u003e \u003capproachable-fs\u003edteam-FS\u003c/approachable-fs\u003e \u003cspace-rel-path\u003e/\u003c/space-rel-path\u003e \u003c/app-rule\u003e \u003c/approachable-rules\u003e   \u003cdn\u003e*\u003c/dn\u003e means that everybody can access the storage Area. Here you can define regular expression on DN fields to define more complex approachable rules.\n  \u003cvo-name\u003edteam\u003c/vo-name\u003e means that only users belonging to the VO dteam will be allowed to access the Storage Area. This entry can be a list of comma separeted VO-name.\n  Used space initialization An administrator can initialize the status of a Storage Area by editing a configuration file, the used-space.ini configuration file, that it’s parsed once at Backend’s bootstrap time. See this configuration example for more info.\n","categories":"","description":"Information about storage managed by StoRM is stored in a configuration file named namespace.xml. \n","excerpt":"Information about storage managed by StoRM is stored in a …","ref":"/storm-docs/docs/concepts/storage-info/","tags":"","title":"StoRM Storage Information"},{"body":"StoRM Frontend binds on IPv6 if there’s a proper /etc/gai.conf on host.\nDownload it from here or copy and paste the following:\n# Configuration for getaddrinfo(3). # # So far only configuration for the destination address sorting is needed. # RFC 3484 governs the sorting. But the RFC also says that system # administrators should be able to overwrite the defaults. This can be # achieved here. # # All lines have an initial identifier specifying the option followed by # up to two values. Information specified in this file replaces the # default information. Complete absence of data of one kind causes the # appropriate default information to be used. The supported commands include: # # reload \u003cyes|no\u003e # If set to yes, each getaddrinfo(3) call will check whether this file # changed and if necessary reload. This option should not really be # used. There are possible runtime problems. The default is no. # # label \u003cmask\u003e \u003cvalue\u003e # Add another rule to the RFC 3484 label table. See section 2.1 in # RFC 3484. The default is: # label ::1/128 0 label ::/0 1 label 2002::/16 2 label ::/96 3 label ::ffff:0:0/96 4 label fec0::/10 5 label fc00::/7 6 label 2001:0::/32 7 label ::ffff:7f00:0001/128 8 # This default differs from the tables given in RFC 3484 by handling # (now obsolete) site-local IPv6 addresses and Unique Local Addresses. # The reason for this difference is that these addresses are never # NATed while IPv4 site-local addresses most probably are. Given # the precedence of IPv6 over IPv4 (see below) on machines having only # site-local IPv4 and IPv6 addresses a lookup for a global address would # see the IPv6 be preferred. The result is a long delay because the # site-local IPv6 addresses cannot be used while the IPv4 address is # (at least for the foreseeable future) NATed. We also treat Teredo # tunnels special. # # precedence \u003cmask\u003e \u003cvalue\u003e # Add another rule to the RFC 3484 precedence table. See section 2.1 # and 10.3 in RFC 3484. The default is: # precedence ::1/128 50 precedence ::/0 40 precedence 2002::/16 30 precedence ::/96 20 precedence ::ffff:0:0/96 10 # # For sites which prefer IPv4 connections change the last line to # #precedence ::ffff:0:0/96 100 # # scopev4 \u003cmask\u003e \u003cvalue\u003e # Add another rule to the RFC 3484 scope table for IPv4 addresses. # By default the scope IDs described in section 3.2 in RFC 3484 are # used. Changing these defaults should hardly ever be necessary. # The defaults are equivalent to: # scopev4 ::ffff:169.254.0.0/112 2 scopev4 ::ffff:127.0.0.0/104 2 scopev4 ::ffff:0.0.0.0/96 14 # # For sites which use site-local IPv4 addresses behind NAT there is # the problem that even if IPv4 addresses are preferred they do not # have the same scope and are therefore not sorted first. To change # this use only these rules: # scopev4 ::ffff:169.254.0.0/112 2 scopev4 ::ffff:127.0.0.0/104 2 scopev4 ::ffff:0.0.0.0/96 14 Also, check your /etc/host.conf if multi is set to on:\n[...] multi on [...] This determines if the host is allowed to have several IP addresses, which is usually referred to as being “multi-homed”. This flag has no effect on DNS or NIS queries.\nWhile on CentOS the default value should be on, on ubuntu hosts the default value is off, for example.\n","categories":"","description":"Example of how to configure StoRM Frontend to bind over IPv6.\n","excerpt":"Example of how to configure StoRM Frontend to bind over IPv6.\n","ref":"/storm-docs/docs/getting-started/frontend/ipv6/","tags":"","title":"Bind StoRM services over IPv6"},{"body":"StoRM is a lightweight storage resource manager (SRM) solution developed at INFN, which powers the Italian Tier-1 data center at INFN-CNAF, as well as more than 30 other sites.\nStoRM has a layered architecture (Figure 1), split between two main components: the StoRM frontend and backend services. The StoRM frontend service implements the SRM interface exposed to client applications and frameworks. The StoRM backend service implements the actual storage management logic by interacting directly with the underlying file system. Data transfer is provided by GridFTP, HTTP/WebDAV and XRootD services accessing directly the file system underlying the StoRM deployment. StoRM WebDAV, besides HTTP data transfer functionality, also provides a WebDAV-based data management interface.\nPrerequisites Platform All the StoRM components are certified to work on CentOS 7. There are no specific minimum hardware requirements but it is advisable to have at least 4GB of RAM on Backend host.\nACL support StoRM uses the ACLs on files and directories to implement the security model. To do this, StoRM uses the native access to the file system. Therefore, in order to ensure a proper running, ACLs need to be enabled on the underlying file-system and work properly (sometimes they are enabled by default).\nIf the getfacl and setfacl commands are not available on your host you have to install acl package:\nyum install acl To check if all works properly, try to set an acl to a test file as follow:\ntouch test setfacl -m u:storm:rw test Note: storm local user must exist.\ngetfacl test Should return the following values:\n# file: test # owner: root # group: root user::rw- user:storm:rw- group::r-- mask::rw- other::r-- To enable ACLs (if needed), you must add the acl property to the relevant file system in your /etc/fstab file. For example:\n/dev/hda3 /storage ext3 defaults, acl 1 2 Then you need to remount the affected partitions as follows:\nmount -o remount /storage This is valid for different file system types (i.e., ext3, xfs, gpfs and others).\nExtended Attribute support StoRM uses the Extended Attributes (EA) on files to store some metadata related to the file (e.g. the checksum value); therefore in order to ensure a proper running, the EA support needs to be enabled on the underlying file system and work properly.\nIf the getfattr and setfattrl commands are not available on your host, install attr package:\nyum install attr To check if all properly works, try to set an extendend attribute to a test file:\ntouch testfile setfattr -n user.testea -v test testfile getfattr -d testfile It should return:\n# file: testfile user.testea=\"test\" To enable EA (if needed) you must add the user_xattr property to the relevant file systems in your /etc/fstab file. For example:\n/dev/hda3 /storage ext3 defaults,acl,user_xattr 1 2 Then you need to remount the affected partitions as follows:\nmount -o remount /storage FQDN Hostname Hostname must be a Fully Qualified Domain Name (FQDN).\nTo check if your hostname is a FQDN, run:\nhostname -f The command must return the host FQDN.\nIf you need to correct it and you are using bind or NIS for host lookups, you can change the FQDN and the DNS domain name, which is part of the FQDN, in the /etc/hosts file.\n# Do not remove the following line, or various programs # that require network functionality will fail. 127.0.0.1 MYHOSTNAME.MYDOMAIN MYHOSTNAME localhost.localdomain localhost ::1 localhost6.localdomain6 localhost6 Set your own MYHOSTNAME and MYDOMAIN and restart the network service:\nservice network restart Host credentials Hosts participating to the StoRM-SE which run services such as StoRM Frontend, StoRM Backend, StoRM WebDAV or StoRM Globus GridFTP must be configured with X.509 certificates signed by a trusted Certification Authority (CA).\nUsually, the hostcert.pem and hostkey.pem certificate and private key are located in the /etc/grid-security directory. They must have permission 0644 and 0400 respectively:\nls -l /etc/grid-security/hostkey.pem -r-------- 1 root root 887 Mar 1 17:08 /etc/grid-security/hostkey.pem ls -l /etc/grid-security/hostcert.pem -rw-r--r-- 1 root root 1440 Mar 1 17:08 /etc/grid-security/hostcert.pem Check if your certificate is expired as follow:\nopenssl x509 -checkend 0 -in /etc/grid-security/hostcert.pem To change permissions, if necessary:\nchmod 0400 /etc/grid-security/hostkey.pem chmod 0644 /etc/grid-security/hostcert.pem NTP service NTP service must be installed and running.\nyum install ntp systemctl enable ntpd systemctl start ntpd ","categories":"","description":"This section provides all the information about deploying and configuring StoRM services.\n","excerpt":"This section provides all the information about deploying and …","ref":"/storm-docs/docs/getting-started/","tags":"","title":"Getting Started"},{"body":"","categories":"","description":"The complete list of StoRM Frontend release notes.\n","excerpt":"The complete list of StoRM Frontend release notes.\n","ref":"/storm-docs/releases/frontend/","tags":"","title":"StoRM Frontend Releases"},{"body":"Install the service package Grab the latest package from the StoRM repository. See instructions here.\nInstall the metapackage:\nyum install storm-globus-gridftp-mp Service configuration The Globus GridFTP server configuration relies on a single file that contains all the configurable parameters. This file is:\n/etc/grid-security/gridftp.conf It contains a list of key-value (space separated) pairs that can be used to configure the server and the loading of StoRM GridFTP DSI plugin. The full list of supported parameters is described in the Globus GridFTP documentation, here.\nConfiguration properties    Property Name Description     port Port on which a frontend will listen for client control channel connections, or on which a data node will listen for connections from a frontend. If not set a random port will be chosen and printed via the logging mechanism.   connections_max Maximum concurrent connections allowed. Only applies when running in daemon mode. Unlimited if not set.   port_range Port range to use for incoming connections. The format is startport,endport. This, along with data_interface, can be used to enable operation behind a firewall and/or when NAT is involved. This is the same as setting the environment variable GLOBUS_TCP_PORT_RANGE.   config_base_path Base path to use when config and log path options are not full paths. By default this is the current directory when the process is started.   log_level A comma separated list of levels from: ERROR, WARN, INFO, TRANSFER, DUMP, ALL. TRANSFER includes the same statistics that are sent to the separate transfer log when log_transfer is used. Example: error,warn,info. You may also specify a numeric level of 1-255. The default level is ERROR.   log_single Path of a single file to log all activity to. If neither this option or log_unique is set, logs will be written to stderr unless the execution mode is detached or inetd, in which case logging will be disabled.   log_transfer Log netlogger style info for each transfer into this file. You may also use the log_level of TRANSFER to include this info in the standard log.   load_dsi_module With value StoRM it loads StoRM DSI module.   allowed_modules With value StoRM it allows StoRM DSI module.    Property names beginning with “$” will be set as environment variables; for instance\n   Variable name Description     $GRIDFTP_WITH_DSI Enable StoRM module to compute checksum. Default value is false.   $GLOBUS_TCP_PORT_RANGE GridFTP transfers port range. This is the same as setting the property port_range.   $GRIDFTP_CONNECTIONS_MAX Set up maximum number of connections.    At each transfer request, StoRM Globus GridFTP uses LCMAPS to get user mapping and start a new processes on behalf of the user to proceed with data transfer. GridFTP relies on a different db file to get the plugin to use. Obviously LCMAPS has to answer to GridFTP requests and StoRM requests in coeherent way. The GridFTP uses the LCMAPS configuration file located at:\n/etc/lcmaps/lcmaps.db IPC Channel The IPC channel is used between a Globus GridFTP server head node and its disk servers, e.g. for striped transfers (read more into the GridFTP System Administrator’s Guide). In the default behavior of StoRM deployment the IPC channel is not used. In fact, StoRM is mainly installed on a single host with one gridFTP server which read/write directly on disk. In the cases it is a distributed deployment, there are usually n gridFTP servers which read/write data directly on disk, behind a haproxy or a dns for example, so there are no separate frontends and one or more disk node servers. However, it’s important to know that the IPC channel must be kept firewalled for any hosts outside the SE system.\n The IPC channel must be kept firewalled for any hosts outside the SE system.\n Configure the service with Puppet The StoRM puppet module can be used to configure the service on CentOS 7 platform.\nThe module contains the storm::gridftp class that installs the metapackage storm-globus-gridftp-mp and allows site administrator to configure storm-globus-gridftp service by managing the following files:\n /etc/grid-security/gridftp.conf, the main configuration file; /etc/sysconfig/storm-globus-gridftp, with some environment variables.  The whole list of StoRM GridFTP class parameters can be found here.\nExamples of StoRM Gridftp configuration:\nclass { 'storm::gridftp': redirect_lcmaps_log =\u003e true, llgt_log_file =\u003e '/var/log/storm/storm-gridftp-lcmaps.log',}","categories":"","description":"StoRM GridFTP DSI (Data Storage Interface) is a plugin of Globus GridFTP that computes the ADLER32 checksum on incoming file transfers and stores this value on an extended attribute of the file.\n","excerpt":"StoRM GridFTP DSI (Data Storage Interface) is a plugin of Globus …","ref":"/storm-docs/docs/getting-started/gridftp/","tags":"","title":"StoRM Globus GridFTP installation and configuration guide"},{"body":"The WebDAV protocol Web Distributed Authoring and Versioning (WebDAV) protocol consists of a set of methods, headers, and content-types ancillary to HTTP/1.1 for the management of resource properties, creation and management of resource collections, URL namespace manipulation, and resource locking. The purpose of this protocol is to present a Web content as a writable medium in addition to be a readable one. WebDAV on Wikipedia and the WebDAV website provide information on this protocol.\nIn a few words, the WebDAV protocol mainly abstracts concepts such as resource properties, collections of resources, locks in general, and write locks specifically. These abstractions are manipulated by the WebDAV-specific HTTP methods and the extra HTTP headers used with WebDAV methods. The WebDAV added methods include:\n PROPFIND - used to retrieve properties, stored as XML, from a web resource. It is also overloaded to allow one to retrieve the collection structure (a.k.a. directory hierarchy) of a remote system. PROPPATCH - used to change and delete multiple properties on a resource in a single atomic act. MKCOL - used to create collections (a.k.a. a directory). COPY - used to copy a resource from one URI to another. MOVE - used to move a resource from one URI to another. LOCK - used to put a lock on a resource. WebDAV supports both shared and exclusive locks. UNLOCK - used to remove a lock from a resource.  While the status codes provided by HTTP/1.1 are sufficient to describe most error conditions encountered by WebDAV methods, there are some errors that do not fall neatly into the existing categories, so the WebDAV specification defines some extra status codes. Since some WebDAV methods may operate over many resources, the Multi-Status response has been introduced to return status information for multiple resources. WebDAV uses XML for property names and some values, and also uses XML to marshal complicated requests and responses.\nStoRM WebDAV From StoRM v.1.11.7 release, the StoRM service that provides valid WebDAV endpoints for each managed storage area is StoRM WebDAV.\nStoRM WebDAV replaces the StoRM gridhttps service. All sites installing StoRM and providing HTTP and WebDAV endpoints should upgrade to the StoRM WebDAV service for improved performance and stability of the service as soon as possible.\nImportant: The StoRM WebDAV service is released and supported only on SL/CENTOS 6.\nInstallation and configuration See the [System Administration Guide][webdavconf] to learn how to install and configure the service.\nEndpoints For each Storage Area, both/either a plain HTTP and/or a HTTP over SSL endpoint can be enabled. The default ports are 8085 (HTTP) and 8443 (HTTPS). All the following URLs are valid endpoints for a storage area:\nhttp://example.infn.it:8085/storage_area_accesspoint https://example.infn.it:8443/storage_area_accesspoint  To fully support the old StoRM GridHTTPs webdav endpoints, used until StoRM v1.11.6, all the URLs with webdav context path are accepted by StoRM WebDAV:\nhttp://example.infn.it:8085/webdav/storage_area_accesspoint https://example.infn.it:8443/webdav/storage_area_accesspoint  Authentication and authorization Users authentication within StoRM WebDAV is made through a valid VOMS proxy. All the users that provide a valid x509 VOMS proxy are authorized to access all the content of the storage area in read/write mode.\nThe most common way to authenticate and be authorized to read/write data into a Storage Area is by providing the right VOMS credentials through a valid VOMS Proxy. Otherwise, through the definition of a VOMS map file, a Storage Area can be configure to accept the list of VO members as obtained by running the voms-admin list-users command. When VOMS mapfiles are enabled, users can authenticate to the StoRM webdav service using the certificate in their browser and be granted VOMS attributes if their subject is listed in one of the supported VOMS mapfile. For each supported VO, a file having the same name as the VO is put in the voms-mapfiles directory (/etc/storm/storm-webdav/vo-mapfiles.d).\nExample: to generate a VOMS mapfile for the cms VO, run the following command\nvoms-admin --host voms.cern.ch --vo cms list-users \u003e cms See more details [here][vomapfiles]. Read permissions of the content of a storage area can also be extendend to anonymous user (it’s disabled by default).\nNotes Both the old storm-gridhttps-server and the new storm-webdav components implements WebDAV protocol by using Milton open source java library.\nExamples The most common WebDAV clients are:\n browsers command-line tools like cURLs, davix and gfal a third-party GUI  Currently, users are used to connect to a WebDAV endpoint providing a valid username and password or as anonymous users (if supported). But, as seen in the Authentication and authorization paragraph, in our case the most common use case is providing a valid VOMS proxy. The VOMS proxies are supported only by command-line tools. Browsers can be used to navigate into the storage area content in the some cases:\n if VO users access through their x509 certificate is enabled (HTTPS endpoint) if anonymous read-only access is enabled (HTTP endpoint)  The use of a third party client (in read only mode) can happen only if anonymous read is enabled.\nYou can also develop a client on your own, for example by using the Apache Jackrabbit API.\nThe following paragraphs will give an example for each WebDAV/HTTP method by using cURLS, DAVIX and gFAL client command line tools. cURL is a command line tool for transferring data with URL syntax (see cURL website).\nAll the requests have been done:\n against our WebDAV test endpoint https://omii006-vm03.cnaf.infn.it:8443/ using test0.p12 of our igi-test-ca credentials:  $ yum install igi-test-ca $ cp /usr/share/igi-test-ca/test0.p12 $HOME $ chmod 600 test0.p12  after the creation of a valid VOMS proxy for test.vo VO  $ cd $HOME $ voms-proxy-init --voms test.vo --cert test0.p12 Download file Having the remote file:\n/test.vo/test.txt\nHello world use:\nCURL  Davix  Gfal   $ curl https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem -o test.txt % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 12 100 12 0 0 101 0 --:--:-- --:--:-- --:--:-- 102 $ davix-get -P Grid https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt test3.txt Performing Read operation on: https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt [====================================] 100% 12B/12B 0B/s $ gfal-copy davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt test2.txt Copying davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt [DONE] after 0s  Download multiple file ranges Having the remote file:\n/test.vo/test.txt\nHello world use:\nCURL  Davix  Gfal   $ curl https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem \\ -o test.txt -H \"Range: 0-1,3-4,8-10\" % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 295 100 295 0 0 1804 0 --:--:-- --:--:-- --:--:-- 1809 $ davix-get -P Grid https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt test3.txt \\ -H \"Range: 0-1,3-4,8-10\" Performing Read operation on: https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt Not supported!  Read file content CURL  Davix  Gfal   $ curl https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem Hello world $ davix-get -P Grid https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt Hello world $ gfal-cat davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt Hello world  Read multiple file ranges CURL  Davix  Gfal   $ curl https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem -H \"Range: 0-1,3-4,8-10\" --jetty1198079116kuzifrgh Content-Type: text/plain Content-Range: bytes 0-1/12 He --jetty1198079116kuzifrgh Content-Type: text/plain Content-Range: bytes 3-4/12 lo --jetty1198079116kuzifrgh Content-Type: text/plain Content-Range: bytes 8-10/12 rld --jetty1198079116kuzifrgh-- $ davix-get -P Grid https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ -H \"Range: 0-1,3-4,8-10\" --jetty77231386kuzigjn3 Content-Type: text/plain Content-Range: bytes 0-1/12 He --jetty77231386kuzigjn3 Content-Type: text/plain Content-Range: bytes 3-4/12 lo --jetty77231386kuzigjn3 Content-Type: text/plain Content-Range: bytes 8-10/12 rld --jetty77231386kuzigjn3-- Not supported!  Upload file CURL  Davix  Gfal   $ curl -T test.txt https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem $ davix-put -P Grid test.txt https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt $ gfal-copy test.txt davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt Copying file:///home/user/test.txt [DONE] after 0s  Check if resource exists To check if a resource exists without download any data in case of a file, the HTTP HEAD method is used. HEAD acts like HTTP/1.1, so HEAD is a GET without a response message body.\nCURL  Davix  Gfal   $ curl -X HEAD https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem curl: (18) transfer closed with 12 bytes remaining to read $ davix-http -P Grid -X HEAD https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt $ gfal-ls davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt  Create directory CURL  Davix  Gfal   $ curl -X MKCOL https://omii006-vm03.cnaf.infn.it:8443/test.vo/testDir \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem $ davix-mkdir -P Grid https://omii006-vm03.cnaf.infn.it:8443/test.vo/testDir $ gfal-mkdir davs://omii006-vm03.cnaf.infn.it:8443/test.vo/testDir  Delete file CURL  Davix  Gfal   $ curl -X DELETE https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem $ davix-rm -P Grid https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt $ gfal-rm davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt\tDELETED  Copy or duplicate file CURL  Davix  Gfal   $ curl -X COPY https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem \\ -H \"Destination: https://omii006-vm03.cnaf.infn.it:8443/test.vo/test3.txt\" $ davix-cp -P Grid https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ https://omii006-vm03.cnaf.infn.it:8443/test.vo/test2.txt $ gfal-copy davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test-copy.txt Copying davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt [DONE] after 0s  Move or rename file As already seen for COPY method, also for every MOVE the Destination header MUST be present.\nCURL  Davix  Gfal   $ curl -X MOVE https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem \\ -H \"Destination: https://omii006-vm03.cnaf.infn.it:8443/test.vo/test2.txt\" $ davix-mv -P Grid https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ https://omii006-vm03.cnaf.infn.it:8443/test.vo/test2.txt $ gfal-rename davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test-renamed.txt  List directory There are two ways to get the list of the resources into a remote directory:\n the first is through an HTTP GET which returns a human readable version of all the content of the directory; the second is through a WebDAV PROPFIND which returns a structured XML body.  The PROPFIND operation retrieves, in XML format, the properties defined on the resource identified by the Request-URI. Clients must submit a Depth header with a value of \"0\", \"1\", or \"infinity\" (default is \"Depth: infinity\").\nClients may submit through the body of the request a ‘propfind’ XML element. It’s used to describe what information is being requested:\n a particular property value (by using the ‘prop’ element)  \u003c?xml version=\"1.0\" encoding=\"utf-8\" ?\u003e \u003cD:propfind xmlns:D=\"DAV:\"\u003e \u003cD:prop xmlns:R=\"http://ns.example.com/boxschema/\"\u003e \u003cR:author/\u003e \u003cR:title/\u003e \u003c/D:prop\u003e \u003c/D:propfind\u003e In this example, the propfind XML element specifies the name of two properties whose values are being requested.\n all property values (by using the ‘allprop’ element);  \u003c?xml version=\"1.0\" encoding=\"utf-8\" ?\u003e \u003cD:propfind xmlns:D=\"DAV:\"\u003e \u003cD:allprop/\u003e \u003c/D:propfind\u003e In this example, the request should return the name and value of all the properties defined by WebDAV specification plus the user defined properties.\n the list of names of all the properties defined on the resource (by using the ‘propname’ element).  \u003c?xml version=\"1.0\" encoding=\"utf-8\" ?\u003e \u003cpropfind xmlns=\"DAV:\"\u003e \u003cpropname/\u003e \u003c/propfind\u003e To list all the content of a remote directory we can use the ‘allprop’ XML body, with depth equal to 1:\nCURL  Davix  Gfal   $ curl -X PROPFIND https://omii006-vm03.cnaf.infn.it:8443/test.vo \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem \\ --data \"\u003c?xml version='1.0' encoding='utf-8' ?\u003e\u003cD:propfind xmlns:D='DAV:'\u003e\u003cD:allprop/\u003e\u003c/D:propfind\u003e\" \\ -H \"Depth:1\" | xmllint --format - % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 54572 0 54481 100 91 414k 708 --:--:-- --:--:-- --:--:-- 412k \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cd:multistatus xmlns:cal=\"urn:ietf:params:xml:ns:caldav\" xmlns:ns1=\"http://storm.italiangrid.org/2014/webdav\" xmlns:cs=\"http://calendarserver.org/ns/\" xmlns:card=\"urn:ietf:params:xml:ns:carddav\" xmlns:d=\"DAV:\"\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cd:getcreated\u003e2021-10-15T12:10:17Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-15T12:10:17Z\u003c/d:creationdate\u003e \u003cd:getcontenttype/\u003e \u003cd:getlastmodified\u003eFri, 15 Oct 2021 12:10:17 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo_-2082722476\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eTRUE\u003c/d:iscollection\u003e \u003cd:displayname\u003etest.vo\u003c/d:displayname\u003e \u003cd:isreadonly\u003eFALSE\u003c/d:isreadonly\u003e \u003cd:name\u003etest.vo\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength/\u003e \u003cd:resourcetype\u003e \u003cd:collection/\u003e \u003c/d:resourcetype\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/test2.txt\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cns1:Checksum/\u003e \u003cd:getcreated\u003e2021-10-14T09:08:43Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-14T09:08:43Z\u003c/d:creationdate\u003e \u003cd:getcontenttype\u003etext/plain\u003c/d:getcontenttype\u003e \u003cd:getlastmodified\u003eThu, 14 Oct 2021 09:08:43 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo/test2.txt_2114950148\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eFALSE\u003c/d:iscollection\u003e \u003cd:displayname\u003etest2.txt\u003c/d:displayname\u003e \u003cd:isreadonly\u003eTRUE\u003c/d:isreadonly\u003e \u003cd:name\u003etest2.txt\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength\u003e12\u003c/d:getcontentlength\u003e \u003cd:resourcetype/\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/test-renamed.txt\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cns1:Checksum\u003e1cf20447\u003c/ns1:Checksum\u003e \u003cd:getcreated\u003e2021-10-14T09:10:18Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-14T09:10:18Z\u003c/d:creationdate\u003e \u003cd:getcontenttype\u003etext/plain\u003c/d:getcontenttype\u003e \u003cd:getlastmodified\u003eThu, 14 Oct 2021 09:10:18 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo/test-renamed.txt_2115045868\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eFALSE\u003c/d:iscollection\u003e \u003cd:displayname\u003etest-renamed.txt\u003c/d:displayname\u003e \u003cd:isreadonly\u003eTRUE\u003c/d:isreadonly\u003e \u003cd:name\u003etest-renamed.txt\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength\u003e12\u003c/d:getcontentlength\u003e \u003cd:resourcetype/\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/testDir/\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cd:getcreated\u003e2021-10-14T08:57:48Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-14T08:57:48Z\u003c/d:creationdate\u003e \u003cd:getcontenttype/\u003e \u003cd:getlastmodified\u003eThu, 14 Oct 2021 08:57:48 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo/testDir_2114295708\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eTRUE\u003c/d:iscollection\u003e \u003cd:displayname\u003etestDir\u003c/d:displayname\u003e \u003cd:isreadonly\u003eFALSE\u003c/d:isreadonly\u003e \u003cd:name\u003etestDir\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength/\u003e \u003cd:resourcetype\u003e \u003cd:collection/\u003e \u003c/d:resourcetype\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/test.txt\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cns1:Checksum\u003e1cf20447\u003c/ns1:Checksum\u003e \u003cd:getcreated\u003e2021-10-14T09:08:23Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-14T09:08:23Z\u003c/d:creationdate\u003e \u003cd:getcontenttype\u003etext/plain\u003c/d:getcontenttype\u003e \u003cd:getlastmodified\u003eThu, 14 Oct 2021 09:08:23 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo/test.txt_2114930212\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eFALSE\u003c/d:iscollection\u003e \u003cd:displayname\u003etest.txt\u003c/d:displayname\u003e \u003cd:isreadonly\u003eTRUE\u003c/d:isreadonly\u003e \u003cd:name\u003etest.txt\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength\u003e12\u003c/d:getcontentlength\u003e \u003cd:resourcetype/\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003c/d:multistatus\u003e $ davix-http -P Grid -X PROPFIND https://omii006-vm03.cnaf.infn.it:8443/test.vo \\ --data \"\u003c?xml version='1.0' encoding='utf-8' ?\u003e\u003cD:propfind xmlns:D='DAV:'\u003e\u003cD:allprop/\u003e\u003c/D:propfind\u003e\" \\ -H \"Depth:1\" | xmllint --format - \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cd:multistatus xmlns:cal=\"urn:ietf:params:xml:ns:caldav\" xmlns:ns1=\"http://storm.italiangrid.org/2014/webdav\" xmlns:cs=\"http://calendarserver.org/ns/\" xmlns:card=\"urn:ietf:params:xml:ns:carddav\" xmlns:d=\"DAV:\"\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cd:getcreated\u003e2021-10-15T12:10:17Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-15T12:10:17Z\u003c/d:creationdate\u003e \u003cd:getcontenttype/\u003e \u003cd:getlastmodified\u003eFri, 15 Oct 2021 12:10:17 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo_-2082722476\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eTRUE\u003c/d:iscollection\u003e \u003cd:displayname\u003etest.vo\u003c/d:displayname\u003e \u003cd:isreadonly\u003eFALSE\u003c/d:isreadonly\u003e \u003cd:name\u003etest.vo\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength/\u003e \u003cd:resourcetype\u003e \u003cd:collection/\u003e \u003c/d:resourcetype\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/test2.txt\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cns1:Checksum/\u003e \u003cd:getcreated\u003e2021-10-14T09:08:43Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-14T09:08:43Z\u003c/d:creationdate\u003e \u003cd:getcontenttype\u003etext/plain\u003c/d:getcontenttype\u003e \u003cd:getlastmodified\u003eThu, 14 Oct 2021 09:08:43 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo/test2.txt_2114950148\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eFALSE\u003c/d:iscollection\u003e \u003cd:displayname\u003etest2.txt\u003c/d:displayname\u003e \u003cd:isreadonly\u003eTRUE\u003c/d:isreadonly\u003e \u003cd:name\u003etest2.txt\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength\u003e12\u003c/d:getcontentlength\u003e \u003cd:resourcetype/\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/test-renamed.txt\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cns1:Checksum\u003e1cf20447\u003c/ns1:Checksum\u003e \u003cd:getcreated\u003e2021-10-14T09:10:18Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-14T09:10:18Z\u003c/d:creationdate\u003e \u003cd:getcontenttype\u003etext/plain\u003c/d:getcontenttype\u003e \u003cd:getlastmodified\u003eThu, 14 Oct 2021 09:10:18 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo/test-renamed.txt_2115045868\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eFALSE\u003c/d:iscollection\u003e \u003cd:displayname\u003etest-renamed.txt\u003c/d:displayname\u003e \u003cd:isreadonly\u003eTRUE\u003c/d:isreadonly\u003e \u003cd:name\u003etest-renamed.txt\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength\u003e12\u003c/d:getcontentlength\u003e \u003cd:resourcetype/\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/testDir/\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cd:getcreated\u003e2021-10-14T08:57:48Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-14T08:57:48Z\u003c/d:creationdate\u003e \u003cd:getcontenttype/\u003e \u003cd:getlastmodified\u003eThu, 14 Oct 2021 08:57:48 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo/testDir_2114295708\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eTRUE\u003c/d:iscollection\u003e \u003cd:displayname\u003etestDir\u003c/d:displayname\u003e \u003cd:isreadonly\u003eFALSE\u003c/d:isreadonly\u003e \u003cd:name\u003etestDir\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength/\u003e \u003cd:resourcetype\u003e \u003cd:collection/\u003e \u003c/d:resourcetype\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/test.txt\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cns1:Checksum\u003e1cf20447\u003c/ns1:Checksum\u003e \u003cd:getcreated\u003e2021-10-14T09:08:23Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-14T09:08:23Z\u003c/d:creationdate\u003e \u003cd:getcontenttype\u003etext/plain\u003c/d:getcontenttype\u003e \u003cd:getlastmodified\u003eThu, 14 Oct 2021 09:08:23 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo/test.txt_2114930212\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eFALSE\u003c/d:iscollection\u003e \u003cd:displayname\u003etest.txt\u003c/d:displayname\u003e \u003cd:isreadonly\u003eTRUE\u003c/d:isreadonly\u003e \u003cd:name\u003etest.txt\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength\u003e12\u003c/d:getcontentlength\u003e \u003cd:resourcetype/\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003c/d:multistatus\u003e $ gfal-ls davs://omii006-vm03.cnaf.infn.it:8443/test.vo test2.txt test-renamed.txt testDir test.txt  To list all the properties of a remote file we can use the same ‘allprop’ XML body:\nCURL  Davix  Gfal   $ curl -X PROPFIND https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --cert $X509_USER_PROXY \\ --capath /etc/grid-security/certificates \\ --cacert /usr/share/igi-test-ca/test0.cert.pem \\ --data \"\u003c?xml version='1.0' encoding='utf-8' ?\u003e\u003cD:propfind xmlns:D='DAV:'\u003e\u003cD:allprop/\u003e\u003c/D:propfind\u003e\" \\ -H \"Depth:1\" | xmllint --format - % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 1053 0 962 100 91 3985 377 --:--:-- --:--:-- --:--:-- 3975 \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cd:multistatus xmlns:cal=\"urn:ietf:params:xml:ns:caldav\" xmlns:ns1=\"http://storm.italiangrid.org/2014/webdav\" xmlns:cs=\"http://calendarserver.org/ns/\" xmlns:card=\"urn:ietf:params:xml:ns:carddav\" xmlns:d=\"DAV:\"\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/test.txt\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cns1:Checksum\u003e1cf20447\u003c/ns1:Checksum\u003e \u003cd:getcreated\u003e2021-10-14T09:08:23Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-14T09:08:23Z\u003c/d:creationdate\u003e \u003cd:getcontenttype\u003etext/plain\u003c/d:getcontenttype\u003e \u003cd:getlastmodified\u003eThu, 14 Oct 2021 09:08:23 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo/test.txt_2114930212\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eFALSE\u003c/d:iscollection\u003e \u003cd:displayname\u003etest.txt\u003c/d:displayname\u003e \u003cd:isreadonly\u003eTRUE\u003c/d:isreadonly\u003e \u003cd:name\u003etest.txt\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength\u003e12\u003c/d:getcontentlength\u003e \u003cd:resourcetype/\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003c/d:multistatus\u003e $ davix-http -P Grid -X PROPFIND https://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt \\ --data \"\u003c?xml version='1.0' encoding='utf-8' ?\u003e\u003cD:propfind xmlns:D='DAV:'\u003e\u003cD:allprop/\u003e\u003c/D:propfind\u003e\" | xmllint --format - \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cd:multistatus xmlns:cal=\"urn:ietf:params:xml:ns:caldav\" xmlns:ns1=\"http://storm.italiangrid.org/2014/webdav\" xmlns:cs=\"http://calendarserver.org/ns/\" xmlns:card=\"urn:ietf:params:xml:ns:carddav\" xmlns:d=\"DAV:\"\u003e \u003cd:response\u003e \u003cd:href\u003e/test.vo/test.txt\u003c/d:href\u003e \u003cd:propstat\u003e \u003cd:prop\u003e \u003cns1:Checksum\u003e1cf20447\u003c/ns1:Checksum\u003e \u003cd:getcreated\u003e2021-10-14T09:08:23Z\u003c/d:getcreated\u003e \u003cd:creationdate\u003e2021-10-14T09:08:23Z\u003c/d:creationdate\u003e \u003cd:getcontenttype\u003etext/plain\u003c/d:getcontenttype\u003e \u003cd:getlastmodified\u003eThu, 14 Oct 2021 09:08:23 GMT\u003c/d:getlastmodified\u003e \u003cd:getetag\u003e\"/storage/test.vo/test.txt_2114930212\"\u003c/d:getetag\u003e \u003cd:iscollection\u003eFALSE\u003c/d:iscollection\u003e \u003cd:displayname\u003etest.txt\u003c/d:displayname\u003e \u003cd:isreadonly\u003eTRUE\u003c/d:isreadonly\u003e \u003cd:name\u003etest.txt\u003c/d:name\u003e \u003cd:supported-report-set/\u003e \u003cd:getcontentlength\u003e12\u003c/d:getcontentlength\u003e \u003cd:resourcetype/\u003e \u003c/d:prop\u003e \u003cd:status\u003eHTTP/1.1 200 OK\u003c/d:status\u003e \u003c/d:propstat\u003e \u003c/d:response\u003e \u003c/d:multistatus\u003e $ gfal-ls davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt davs://omii006-vm03.cnaf.infn.it:8443/test.vo/test.txt  ","categories":"","description":"","excerpt":"The WebDAV protocol Web Distributed Authoring and Versioning (WebDAV) …","ref":"/storm-docs/docs/user-guides/webdav/","tags":"","title":"WebDAV User Guide"},{"body":"LCMAPS is the Local Credential Mapping Service and it takes care of translating grid credentials to Unix credentials local to the site by using the pool account mechanism. It takes care of ensuring that different individuals on the Grid remain distinct Unix accounts. Using group mappings based on the user’s VO attributes, isolation and scheduling priority decisions can be made.\n See more on https://wiki.nikhef.nl/grid/LCMAPS\n This mapping can be configured via YAIM through the variables USERS_CONF and GROUPS_CONF. These variables contain the full absolute path of a couple of files: users.conf and groups.conf.\nThe file users.conf contains the list of Linux users (pool accounts) to be created. It’s a plain list of the users and their IDs. An example of this configuration file can be found into:\n/opt/glite/yaim/examples/users.conf More details can be found in the User configuration section in the YAIM guide.\nThe UNIX users here defined must be created on the service nodes that need them (mainly CE and WNs). The format is the following (fields must not have any white space):\nUID:LOGIN:GID1[,GID2,...]:GROUP1[,GROUP2,...]:VO:FLAG:  UID = user ID. This must be a valid uid. Make sure the number you choose is not assigned to another user. LOGIN = login name GID1 = primary group ID. This must be a valid gid. Make sure the number you choose is not assigned to another group. GID2 = secondary group ID. GROUP1 = primary group GROUP2 = secondary group VO = virtual organization FLAG = string to identify special users, further described below  You can customize this file to your site needs.\nThe groups.conf file defines the user categories that must be accepted by the grid services provided by a site. It indicates for each category to which kind of local accounts the user should be mapped, where applicable. The file has the following format:\n\"VOMS_FQAN\":GROUP:GID:FLAG:[VO]  VOMS_FQAN = VOMS proxy fully qualified attribute name GROUP = UNIX group GID = UNIX GID FLAG = string to identify special users, further described below VO = virtual organization (optional. It allows the VO to be specified explicitly, otherwise it will be derived from the VOMS FQAN  The groups.conf distributed by YAIM is only an example. You can remove the lines that doesn’t apply to your site or VO and add new lines if needed. Example:\n\"/dteam/ROLE=lcgadmin\":::sgm: \"/dteam/ROLE=production\":::prd: \"/dteam\":::: The groups.conf file lists the VOMS proxy primary FQANs that are accepted. If a proxy has a secondary FQAN that matches one of the FQANs listed, the mapped account may receive an extra secondary GID corresponding to the matched FQAN. That GID normally is derived from the corresponding accounts in the users.conf file. If there are no accounts dedicated to that FQAN, the desired extra GID (if any) and GROUP name must be given in groups.conf. Note that:\n it is normal for the second and third fields to be empty, as shown in the example; the account corresponding to the primary FQAN does not have to belong to any secondary group: the LCMAPS library can set secondary groups independently of what is in /etc/group; the order of the lines in groups.conf is important: for any FQAN only the first match is taken  The FLAG selects a set of special accounts to be used for the mapping, namely those accounts in users.conf that have the same flag. By default, when the flag is empty, the ordinary pool accounts will be used.\nExample Configure users and groups mapping We want to create the following pool accounts:\n a pool account of 100 users with group name testvo and test.vo as VO name a pool account of 30 production users with group name testvoprd, test.vo as VO name and prd as FLAG.  In order to do this we have to create the following files:\n storm-users.conf storm-groups.conf  The first file contains the definition of all the users (with their relative groups):\n71001:tstvo001:7100:testvo:test.vo:: 71002:tstvo002:7100:testvo:test.vo:: 71003:tstvo003:7100:testvo:test.vo:: 71004:tstvo004:7100:testvo:test.vo:: ... 71100:tstvo100:7100:testvo:test.vo:: 71101:testvoprd001:7170,7100:testvoprd,testvo:test.vo:prd: 71102:testvoprd002:7170,7100:testvoprd,testvo:test.vo:prd: 71103:testvoprd003:7170,7100:testvoprd,testvo:test.vo:prd: 71104:testvoprd004:7170,7100:testvoprd,testvo:test.vo:prd: ... 71129:testvoprd029:7170,7100:testvoprd,testvo:test.vo:prd: 71130:testvoprd030:7170,7100:testvoprd,testvo:test.vo:prd: The second file contains the mapping rules used to map a FQAN to a local group.\n\"/test.vo/ROLE=R1\":::prd: \"/test.vo\":::: In this case, we defined:\n a rule that maps test.vo users with role equal to R1 to the pool account with FLAG = prd (group name testvoprd) a rule that maps all the other test.vo users to the group testvo  To apply the changes, define YAIM’s variables into a site.def file:\nUSERS_CONF=/path/to/storm-users.conf GROUPS_CONF=/path/to/storm-groups.conf VOS=test.vo and run yaim configuration as follow:\n/opt/glite/yaim/bin/yaim \\  -c -s site.def \\  -n se_config_users You need a YAIM profile /opt/glite/yaim/node-info.d/se_config_users defined as follows:\nse_config_users_FUNCTIONS=\" config_users \"  Install YAIM with:\nyum install -y glite-yaim-core attr  INSTALL_ROOT USERS_CONF GROUPS_CONF VOS VO__VOMS_SERVERS GRIDMAPFILE CONFIG_GRIDMAPDIR\n","categories":"","description":"StoRM Backend needs a mapping service that converts user's Grid credentials to a local UNIX user and group. The service used by StoRM is **LCMAPS**.\n","excerpt":"StoRM Backend needs a mapping service that converts user's Grid …","ref":"/storm-docs/docs/getting-started/backend/lcmaps-mapping/","tags":"","title":"LCMAPS mapping"},{"body":"","categories":"","description":"The complete list of StoRM WebDAV release notes.\n","excerpt":"The complete list of StoRM WebDAV release notes.\n","ref":"/storm-docs/releases/webdav/","tags":"","title":"StoRM WebDAV Releases"},{"body":" This is a placeholder page that shows you how to use this template site.\n For many projects, users may not need much information beyond the information in the Overview, so this section is optional. However if there are areas where your users will need a more detailed understanding of a given term or feature in order to do anything useful with your project (or to not make mistakes when using it) put that information in this section. For example, you may want to add some conceptual pages if you have a large project with many components and a complex architecture.\nRemember to focus on what the user needs to know, not just what you think is interesting about your project! If they don’t need to understand your original design decisions to use or contribute to the project, don’t put them in, or include your design docs in your repo and link to them. Similarly, most users will probably need to know more about how features work when in use rather than how they are implemented. Consider a separate architecture page for more detailed implementation and system design information that potential project contributors can consult.\n","categories":"","description":"What does your user need to understand about your project in order to use it - or potentially contribute to it? \n","excerpt":"What does your user need to understand about your project in order to …","ref":"/storm-docs/docs/concepts/","tags":"","title":"Concepts"},{"body":"The following is an example of how to make the storage site report in JSON readble from all VOs' authenticated users through a WebDAV endpoint.\nConfigure a storage area The aim is allowing all the users to access - through a WebDAV endpoint - the JSON storage report.\nIn the following example, a dedicated storage area named info has been added and configured to be readable-only by all the users.\nPuppet configuration There’s no need to add the info storage area to the ones managed by StoRM Backend. We can add the info storage area only to storm::webdav class in order to implicitly say that this storage area will be accessed only through HTTP and not through SRM. Configure this storage area with no VOs and set authenticated_read_enabled as true to allow browsing the report with your personal x509 certificate.\nclass { 'storm::webdav':# ... storage_areas =\u003e [{ 'name' =\u003e 'info', 'root_path' =\u003e '/storage/info', 'access_points' =\u003e ['/info'], 'vos' =\u003e [], 'authenticated_read_enabled' =\u003e true, },# ... ]}Apply Puppet configuration.\nPeriodically reload report Refresh script Write a simple bash script which runs info-provider, gets the updated json-report and replaces the old one.\n#!/bin/bash set -x TMP_REPORT_PATH=\"/tmp/site-report-$(date +%s).json\" TARGET_REPORT_PATH=\"/storage/info/report.json\" if [ $# -gt 0 ]; then TARGET_REPORT_PATH=$1 fi # refresh report /usr/libexec/storm-info-provider get-report-json -o $TMP_REPORT_PATH # copy report to storage area cp $TMP_REPORT_PATH $TARGET_REPORT_PATH chown storm:storm $TARGET_REPORT_PATH Save it into /root/update-report.sh\nCron-job Create a cron-job that runs update-report.sh script hourly.\nCreate /etc/cron.d/update-site-report as follow:\n*/30 * * * * root /bin/bash /root/update-report.sh The update-report.sh script will be executed each 30 minutes. Read more info about cron jobs into the man page.\nConfigure periodic updates with Puppet The same update script has been added to Puppet module since version 0.4.4.\nYou can add to your manifest (where StoRM Backend is defined) the following resources:\nfile { '/root/update-site-report.sh': ensure =\u003e 'present', source =\u003e 'puppet:///modules/storm/update-site-report.sh',}cron { 'update-site-report': ensure =\u003e 'present', command =\u003e '/bin/bash /root/update-site-report.sh', user =\u003e 'root', minute =\u003e '*/20', require =\u003e File['/root/update-site-report.sh'],}exec { 'create-site-report': command =\u003e '/bin/bash /root/update-site-report.sh', require =\u003e File['/root/update-site-report.sh'],}This snippet executes the script and also creates the cron job. In alternative, you can use a defined type that does the same things:\nstorm::backend::storage_site_report { 'storage-site-report': report_path =\u003e '/storage/info/report.json', minute =\u003e '*/20',}The report_path is the internal info storage area path where report has to be created. The minute can be used to customize the cron’s minute parameter.\nGet JSON report through HTTP Acting as test0 user of test.vo VO, we can access storage area with a simple http get.\nWe need test0 user’s certificate test0.cert.pem and his unencrypted key test0.ukey.pem.\n$ curl https://omii005-vm03.cnaf.infn.it:8443/info/report.json \\  --cert ./test0.cert.pem \\  --key ./test0.ukey.pem \\  --capath /etc/grid-security/certificates Output:\n{ \"storageservice\": { \"capabilities\": [ \"data.management.transfer\", \"data.management.storage\" ], \"implementation\": \"storm\", \"implementationversion\": \"1.11.16\", \"latestupdate\": 1571388242, \"name\": \"storm-testbed\", \"qualitylevel\": \"pre-production\", \"storageendpoints\": [ { \"assignedshares\": [ \"all\" ], \"capabilities\": [ \"data.management.transfer\", \"data.management.storage\" ], \"endpointurl\": \"httpg://omii005-vm03.cnaf.infn.it:8444/srm/managerv2\", \"interfacetype\": \"srm\", \"interfaceversion\": \"2.2\", \"name\": \"SRM_0\", \"qualitylevel\": \"pre-production\" }, { \"assignedshares\": [ \"all\" ], \"capabilities\": [ \"data.management.transfer\", \"data.management.storage\" ], \"endpointurl\": \"http://omii005-vm03.cnaf.infn.it:8085\", \"interfacetype\": \"DAV\", \"interfaceversion\": \"1.1\", \"name\": \"HTTP_0\", \"qualitylevel\": \"pre-production\" }, { \"assignedshares\": [ \"all\" ], \"capabilities\": [ \"data.management.transfer\", \"data.management.storage\" ], \"endpointurl\": \"https://omii005-vm03.cnaf.infn.it:8443\", \"interfacetype\": \"DAV\", \"interfaceversion\": \"1.1\", \"name\": \"HTTPS_0\", \"qualitylevel\": \"pre-production\" } ], \"storageshares\": [ { \"accesslatency\": \"online\", \"assignedendpoints\": [ \"all\" ], \"name\": \"INFO_TOKEN\", \"path\": [ \"/info\" ], \"retentionpolicy\": \"replica\", \"servingstate\": \"open\", \"timestamp\": 1571388242, \"totalsize\": 1000000000, \"usedsize\": 5824, \"vos\": [ \"test.vo\", \"test.vo.2\" ] }, { \"accesslatency\": \"nearline\", \"assignedendpoints\": [ \"all\" ], \"name\": \"TAPE_TOKEN\", \"path\": [ \"/tape\" ], \"retentionpolicy\": \"custodial\", \"servingstate\": \"open\", \"timestamp\": 1571388242, \"totalsize\": 14000000000, \"usedsize\": 464525, \"vos\": [ \"test.vo.2\" ] }, { \"accesslatency\": \"online\", \"assignedendpoints\": [ \"all\" ], \"name\": \"TESTVO_TOKEN\", \"path\": [ \"/test.vo\" ], \"retentionpolicy\": \"replica\", \"servingstate\": \"open\", \"timestamp\": 1571388242, \"totalsize\": 24000000000, \"usedsize\": 1315148151, \"vos\": [ \"test.vo\" ] }, { \"accesslatency\": \"online\", \"assignedendpoints\": [ \"all\" ], \"name\": \"OAUTHAUTHZ_TOKEN\", \"path\": [ \"/oauth-authz\" ], \"retentionpolicy\": \"replica\", \"servingstate\": \"open\", \"timestamp\": 1571388242, \"totalsize\": 4000000000, \"usedsize\": 4096, \"vos\": [ \"test.vo\" ] } ] } } ","categories":"","description":"Learn how to allow VO’s authenticated users to access JSON report.\n","excerpt":"Learn how to allow VO’s authenticated users to access JSON report.\n","ref":"/storm-docs/docs/getting-started/backend/ssr/","tags":"","title":"How-to publish storage site report"},{"body":"","categories":"","description":"The complete list of StoRM GridFTP DSI plugin release notes.\n","excerpt":"The complete list of StoRM GridFTP DSI plugin release notes.\n","ref":"/storm-docs/releases/gridftp/","tags":"","title":"StoRM GridFTP DSI plugin releases"},{"body":"","categories":"","description":"","excerpt":"","ref":"/storm-docs/docs/user-guides/","tags":"","title":"User Guides"},{"body":"Create local pool accounts with YAIM In order to create your local pool accounts with YAIM, you need to define a users.conf file and assign its absolute path to the YAIM variable USERS_CONF.\nThe file users.conf contains the list of Linux users (pool accounts) to be created. It’s a plain list of the users and their IDs. An example of this configuration file can be found into:\n/opt/glite/yaim/examples/users.conf More details can be found in the User configuration section in the YAIM guide.\nThe UNIX users here defined must be created on the service nodes that need them (mainly CE and WNs). The format is the following (fields must not have any white space):\nUID:LOGIN:GID1[,GID2,...]:GROUP1[,GROUP2,...]:VO:FLAG:  UID = user ID. This must be a valid uid. Make sure the number you choose is not assigned to another user. LOGIN = login name GID1 = primary group ID. This must be a valid gid. Make sure the number you choose is not assigned to another group. GID2 = secondary group ID. GROUP1 = primary group GROUP2 = secondary group VO = virtual organization FLAG = string to identify special users, further described below  Example We want to create the following pool accounts:\n a pool account of 100 users with group name testvo and test.vo as VO name a pool account of 30 production users with group name testvoprd, test.vo as VO name and prd as FLAG.   This example is done with YAIM, therefore we need to install it in case:\nyum install -y glite-yaim-core attr  In order to do this we have to create the following file:\n storm-users.conf  This file contains the definition of all the users (with their relative groups):\n71001:tstvo001:7100:testvo:test.vo:: 71002:tstvo002:7100:testvo:test.vo:: 71003:tstvo003:7100:testvo:test.vo:: 71004:tstvo004:7100:testvo:test.vo:: ... 71100:tstvo100:7100:testvo:test.vo:: 71101:testvoprd001:7170,7100:testvoprd,testvo:test.vo:prd: 71102:testvoprd002:7170,7100:testvoprd,testvo:test.vo:prd: 71103:testvoprd003:7170,7100:testvoprd,testvo:test.vo:prd: 71104:testvoprd004:7170,7100:testvoprd,testvo:test.vo:prd: ... 71129:testvoprd029:7170,7100:testvoprd,testvo:test.vo:prd: 71130:testvoprd030:7170,7100:testvoprd,testvo:test.vo:prd: To apply the changes, define YAIM’s variables into a site.def configuration file:\nUSERS_CONF=/path/to/storm-users.conf VOS=test.vo You need a proper YAIM profile /opt/glite/yaim/node-info.d/se_config_users defined as follows:\nse_config_users_FUNCTIONS=\" config_users \" The only function used in this profile is the one that creates the users. Then, you can run yaim configuration as follow:\n/opt/glite/yaim/bin/yaim \\  -c -s site.def \\  -n se_config_users ","categories":"","description":"","excerpt":"Create local pool accounts with YAIM In order to create your local …","ref":"/storm-docs/docs/getting-started/backend/pool-accounts/","tags":"","title":"Pool accounts configuration"},{"body":"","categories":"","description":"The complete list of StoRM Native Libs release notes.\n","excerpt":"The complete list of StoRM Native Libs release notes.\n","ref":"/storm-docs/releases/native-libs/","tags":"","title":"StoRM Native Libs Releases"},{"body":"","categories":"","description":"The complete list of StoRM Dynamic Info Provider release notes.\n","excerpt":"The complete list of StoRM Dynamic Info Provider release notes.\n","ref":"/storm-docs/releases/info-provider/","tags":"","title":"StoRM Dynamic Info Provider Releases"},{"body":"","categories":"","description":"The complete list of StoRM SRM Client release notes.\n","excerpt":"The complete list of StoRM SRM Client release notes.\n","ref":"/storm-docs/releases/srm-client/","tags":"","title":"StoRM SRM Client Releases"},{"body":"","categories":"","description":"The complete list of StoRM XMLRPC-C release notes.\n","excerpt":"The complete list of StoRM XMLRPC-C release notes.\n","ref":"/storm-docs/releases/xmlrpc-c/","tags":"","title":"StoRM XMLRPC-C Releases"},{"body":"","categories":"","description":"The complete list of StoRM Backend release notes.\n","excerpt":"The complete list of StoRM Backend release notes.\n","ref":"/storm-docs/releases/cdmi-storm/","tags":"","title":"CDMI StoRM Releases"},{"body":"If your project has an API, configuration, or other reference - anything that users need to look up that’s at an even lower level than a single task - put (or link to it) here. You can serve and link to generated reference docs created using Doxygen, Javadoc, or other doc generation tools by putting them in your static/ directory. Find out more in Adding static content. For OpenAPI reference, Docsy also provides a Swagger UI layout and shortcode that renders Swagger UI using any OpenAPI YAML or JSON file as source.\n","categories":"","description":"Low level reference docs for your project.\n","excerpt":"Low level reference docs for your project.\n","ref":"/storm-docs/docs/reference/","tags":"","title":"Reference"},{"body":"","categories":"","description":"The complete list of StoRM Utils release notes.\n","excerpt":"The complete list of StoRM Utils release notes.\n","ref":"/storm-docs/releases/utils/","tags":"","title":"StoRM Utils Releases"},{"body":"","categories":"","description":"","excerpt":"","ref":"/storm-docs/blog/news/","tags":"","title":"News About StoRM"},{"body":"","categories":"","description":"","excerpt":"","ref":"/storm-docs/blog/releases/","tags":"","title":"New StoRM Releases"},{"body":"","categories":"","description":"for StoRM v1.12.0\n","excerpt":"for StoRM v1.12.0\n","ref":"/storm-docs/docs/","tags":"","title":"Documentation"},{"body":"The StoRM website and documentation has moved from here, and if you’re reading this you already know.\nThe new StoRM website is powered by Docsy, a Hugo theme for creating technical documentation sites, which is increasingly popular in Open Source projects.\nThe new site provides new and improved documentation.\nIf you find something is missing or broken, let us know by opening an issue or suggest changes. The new Docsy website makes this very easy to anyone with a Github account, just see the tab on the right of each page.\n","categories":"","description":"The new StoRM website (powered by the Docsy Hugo theme)","excerpt":"The new StoRM website (powered by the Docsy Hugo theme)","ref":"/storm-docs/blog/2022/01/14/new-storm-website/","tags":"","title":"New StoRM website!"},{"body":"The StoRM Product Team is pleased to announce the release of StoRM 1.11.21 that includes the following updated components:\n StoRM Backend v. 1.11.21 StoRM Frontend v. 1.8.15 StoRM WebDAV v. 1.4.1  and introduces:\n StoRM Utils v. 1.0.0  This release:\n fixes the known issue about the upgrade to StoRM v1.11.20 which could break connections with MariaDB fixes the boot order for both Frontend and Backend ensuring that mariadb service is started before StoRM services; fixes the failed state shown on stop/restart of Java components; provides a set of scripts that can be used to edit from command line the storage space info related to a storage area.  Please, follow the upgrade instructions. Read the release notes for more details.\n","categories":"","description":"Released packages: StoRM Backend 1.11.21, StoRM Frontend 1.8.15, StoRM WebDAV 1.4.1 and StoRM Utils 1.0.0\n","excerpt":"Released packages: StoRM Backend 1.11.21, StoRM Frontend 1.8.15, StoRM …","ref":"/storm-docs/blog/2021/05/12/released-storm-v1.11.21/","tags":"","title":"Released StoRM v1.11.21"},{"body":"After the update from StoRM v1.11.19 to StoRM v1.11.20, if JVM and database are not on the same timezone, the Backend’s communication with MariaDB could start failing with the following error:\nCaused by: java.sql.SQLException: The server time zone value 'CEST' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support. This bug is tracked at STOR-1397.\nThe possible solutions to avoid this problem are:\n downgrade StoRM Backend to v1.11.19 (recommended) apply a workaround within MariaDB install StoRM Backend v1.11.21 beta  Downgrade StoRM Backend to v1.11.19 RECOMMENDED. It’s the fastest and easy thing to do. The command:\nyum downgrade storm-backend-server should ask you to install StoRM Backend v1.11.19. Confirm and restart the service:\nsystemctl restart storm-backend-server Apply a workaround within MariaDB   Populate mysql.time_zone_name table\nThe mysql.time_zone_name table should be empty:\nMariaDB [mysql]\u003e SELECT * FROM mysql.time_zone_name; Empty set (0.00 sec) and global variable time_zone should be set to SYSTEM.\nMariaDB [mysql]\u003e SHOW GLOBAL VARIABLES LIKE 'time_zone'; +---------------+--------+ | Variable_name | Value | +---------------+--------+ | time_zone | SYSTEM | +---------------+--------+ 1 row in set (0.00 sec) We need to populate that table as follows:\nmysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -uroot -pYOUR_MYSQL_ROOT_PASSWORD mysql   Set default_time_zone\nEdit /etc/my.cnf.d/server.conf and add under [mysql] section add the following:\ndefault_time_zone = Europe/Rome Or choose your proper time_zone.\n  Restart MySQL\nsystemctl restart mariadb And check new time zone value:\nMariaDB [(none)]\u003e SHOW GLOBAL VARIABLES LIKE 'time_zone'; +---------------+-------------+ | Variable_name | Value | +---------------+-------------+ | time_zone | Europe/Rome | +---------------+-------------+ 1 row in set (0.00 sec)   Restart StoRM Backend\nsystemctl restart storm-backend-server   Install StoRM Backend v1.11.21 beta StoRM beta repository already contains a beta version of next StoRM v1.11.21 with this error fixed. Of course beta repository is not a stable repo, so apply this in case of a testbed. We do not recommend use this rpms in a production behaviour.\nBrowse CentOS 7 Beta repository here.\n","categories":"","description":"After the update from StoRM v1.11.19 to StoRM v1.11.20, if JVM and database are not on the same timezone, the Backend’s communication with MariaDB could start failing.\n","excerpt":"After the update from StoRM v1.11.19 to StoRM v1.11.20, if JVM and …","ref":"/storm-docs/blog/2021/04/30/storm-v1.11.20-could-break-connections-with-mariadb/","tags":"","title":"StoRM v1.11.20 could break connections with MariaDB"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header. Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/storm-docs/docs/reference/example-page/","tags":"","title":"Example Page"},{"body":"","categories":"","description":"","excerpt":"","ref":"/storm-docs/about/","tags":"","title":"About us"},{"body":"","categories":"","description":"StoRM Backend service configuration. \n","excerpt":"StoRM Backend service configuration. \n","ref":"/storm-docs/docs/getting-started/backend/","tags":"","title":"StoRM Backend"},{"body":"The StoRM Backend component has several responsabilities:\n executes all synchronous (active) actions retrieves asynchronous request from the database executes all asynchronous actions binds with underlying file systems enforces authorization policy on files manages SRM file and space metadata  Internal macro components StoRM Backend has the following internal macro components:\n Asynchronous SRM requests manager Synchronous SRM requests manager XML-RPC server Persistence manager Namespace component Autorization component Filesystem manager  SRM requests from database The Picker component retrieves the specified amount of new SRM requests from the Database at each time interval, and forward them to a Scheduler. The Scheduler takes care of forward the request to the right worker thread as a new task to be executed. The request status is updated into the Database with all the information concerining request results, error and other data. This data are accessible from the FE to answer to a srmStatusOf* request. This pattern is shown in the following picture:\nMost of the parameters characterizing this architecture are configurable.\nFile System driver StoRM interacts with the different file systems supported through a driver mechanism. Each driver is a native library written mainly in C/C++, since most of the file system provides C libraries for the advanced API. StoRM Backend uses JNI to connect with drivers. The functionalities provided by each driver are:\n ACL management Space management  The drivers available with StoRM are:\n posixfs generic driver for posix file system. It relies on the standard setfacl(), getfacl() syscall for ACL management, and it does not provide any advanced space management capabilities. GPFS specific driver that relies on GPFS advanced API, such as gpfs_prealloc for space management and gpfs_set_acl() for ACL management.  This driver mechanism implements a common interface and decouple StoRM internal logic from the different functionalities provided by the underlying storage system. The drivers are loaded at run time following the storage namespace configuration. A single StoRM server is able to work on different file system at the same time, and with this flexible approach it can be easily adapted to support new kind of file systems or other storage resources.\n","categories":"","description":"The Backend is the core of SRM implementation and REST services. It executes all SRM functionalities, it takes care of file and space metadata management, enforces authorization permissions on files and interacts with external Grid services.\n","excerpt":"The Backend is the core of SRM implementation and REST services. It …","ref":"/storm-docs/docs/overview/backend/","tags":"","title":"StoRM Backend"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases. …","ref":"/storm-docs/blog/","tags":"","title":"StoRM Blog"},{"body":"","categories":"","description":"","excerpt":"","ref":"/storm-docs/community/","tags":"","title":"StoRM Community"},{"body":"","categories":"","description":"StoRM Frontend service configuration. \n","excerpt":"StoRM Frontend service configuration. \n","ref":"/storm-docs/docs/getting-started/frontend/","tags":"","title":"StoRM Frontend"},{"body":"Pool of worker threads The FE uses a pool of worker threads to manage SRM requests. Once a request has been authorized, the FE assigns it as a new task for a worker thread. In case there are no free threads in the system, the request is maintained in an internal queue. The size of the pool and the size of the queue are important parameters, their value have to be defined depending on hardware resources and performance required. Depending on the type of SRM request, each thread should have two main task to do, as explained in the next paragraph.\nXML-RPC communication Synchronous SRM requests are a category of SRM calls that return the control to the client only when the request has been executed by the system. Most of the SRM call belongs to this category:\n Namespace operations (srmLs, srmMkdir, etc.) Discovery operation (srmPing) Space operations (srmReserveSpace, srmGetSpaceMetadata, etc.)  For this type of request, the FE perform a direct communication to the Backend using a RPC approach, based on the XML-RPC protocol. XML-RPC is a simple protocol to exchange XML structured data over HTTP. The Backend provides an XML-RPC server and the FE(s) acts as client. A worker threads in case of synchronous requests performs this steps:\n structure the SRM data in XML send a request to the BE XML-RPC server wait until the execution get result from XML and unmarshall it in SOAP return the control to the client  ","categories":"","description":"The Frontend component exposes the SRM web service interface, manages user authentication and stores the data of the SRM requests into the database. It relies on the GSOAP framework to expose the SRM interface and it uses the CGSI-GSOAP plugin to manage secure connection with clients.\n","excerpt":"The Frontend component exposes the SRM web service interface, manages …","ref":"/storm-docs/docs/overview/frontend/","tags":"","title":"StoRM Frontend"},{"body":" This is a placeholder page. Replace it with your own content.\n ","categories":"","description":"StoRM Globus GridFTP DSI plugin service configuration\n","excerpt":"StoRM Globus GridFTP DSI plugin service configuration\n","ref":"/storm-docs/docs/getting-started/gridftp/","tags":"","title":"StoRM Globus GridFTP DSI plugin"},{"body":" This is a placeholder page. Replace it with your own content.\n ","categories":"","description":"The GridFTP DSI plugin is ...\n","excerpt":"The GridFTP DSI plugin is ...\n","ref":"/storm-docs/docs/overview/gridftp/","tags":"","title":"StoRM GridFTP DSI plugin"},{"body":"The Frontend logs information on the service status and the SRM requests received and managed by the process. The Frontend’s log supports different level of logging (ERROR, WARNING, INFO, DEBUG, DEBUG2) that can be set via the log.debuglevel property in the storm-frontend-server.conf configuration file (placed in the /etc/storm/frontend-server directory). The default logging level is set to INFO. The Frontend log file named storm-frontend-server.log is placed in the /var/log/storm directory. At start-up time, the FE prints here the whole set of configuration parameters, this can be useful to check the desired values. When a new SRM request is managed, the FE logs information about the user (DN and FQANs) and the requested parameters. At each SRM request, the FE logs also this important information:\n03/19 11:51:42 0x88d4ab8 main: AUDIT - Active tasks: 3 03/19 11:51:42 0x88d4ab8 main: AUDIT - Pending tasks: 0 about the status of the worker pool threads and the pending process queue. Active tasks is the number of worker threads actually running. Pending tasks is the number of SRM requests queued in the worker pool queue. These data gives important information about the Frontend load.\nThe monitoring.log file The monitoring service can be enable/disable with the monitoring.enabled property (default value is true). It provides information about the operations executed in a certain amount of time, which are stored on a monitoring.log file available in the /var/log/storm directory. The time period (called Monitoring Round) can be set via the configuration property monitoring.timeInterval; its default value is 1 minute. At each Monitoring Round, a single row is printed on log. This row reports both information about requests that have been performed in the last Monitoring Round and information considering the whole FE execution time (Aggregate Monitoring). Informations reported are generated from both Synchronous and Asynchronous requests and tell the user:\n how many requests have been performed in the last Monitoring Round, how many of them were successful, how many failed, how many produced an error, the average execution time, the minimum execution time, the maximum execution time.  This row reports the Monitoring Summary and this is the default behavior of the monitoring service.\nExample:\n03/20 14:19:11 : [# 22927 lifetime=95:33:18] S [OK:47,F:15,E:0,m:0.085,M:3.623,Avg:0.201] A [OK:16,F:0,E:0,m:0.082,M:0.415,Avg:0.136] Last:(S [OK:12,F:5,E:0,m:0.091,M:0.255] A [OK:6,F:0,E:0,m:0.121,M:0.415]) Furthermore a more detailed Frontend Monitoring activity can be requested by setting the configuration property monitoring.detailed to true. Doing this, at each Monitoring Round for each kind of SRM operation performed in the Monitoring Round (srmls, srmPtp, srmRm, …) the following information are printed in a section with header “Last round details:\":\n how many request succeeded, how many failed, how many produced an error, the average execution time, the minimum execution time, the maximum execution time, the execution time standard deviation.  This is called the Detailed Monitoring Round. After this, the Monitoring Summary is printed. Then, considering the whole Frontend execution time, in a section with header “Details:”, a similar detailed summary is printed. This is called the Aggregate Detailed Monitoring.\nExample:\n03/20 14:19:11 : Last round details: 03/20 14:19:11 : [PTP] [OK:3,F:0,E:0,Avg:0.203,Std Dev:0.026,m:0.183,M:0.240] 03/20 14:19:11 : [Put done] [OK:2,F:0,E:0,Avg:0.155,Std Dev:0.018,m:0.136,M:0.173] 03/20 14:19:11 : [# 22927 lifetime=95:33:18] S [OK:47,F:15,E:0,m:0.085,M:3.623,Avg:0.201] A [OK:16,F:0,E:0,m:0.082,M:0.415,Avg:0.136] Last:(S [OK:12,F:5,E:0,m:0.091,M:0.255] A [OK:6,F:0,E:0,m:0.121,M:0.415]) 03/20 14:19:11 : Details: 03/20 14:19:11 : [PTP] [OK:7,F:0,E:0,Avg:0.141,Std Dev:0.057,m:0.085,M:0.240] 03/20 14:19:11 : [Put done] [OK:5,F:0,E:0,Avg:0.152,Std Dev:0.027,m:0.110,M:0.185] 03/20 14:19:11 : [Release files] [OK:4,F:0,E:0,Avg:0.154,Std Dev:0.044,m:0.111,M:0.216] 03/20 14:19:11 : [Rm] [OK:3,F:0,E:0,Avg:0.116,Std Dev:0.004,m:0.111,M:0.122] Note:\n Operations not performed in current Monitoring Round are not printed in Detailed Monitoring Round. Operations never performed are not printed in Aggregate Detailed Monitoring. Operation performed in current Monitoring Round are aggregated in Aggregate Detailed Monitoring.  gSOAP tracefile If you have problem at gSOAP level, and you have already looked at the troubleshooting section of the StoRM site without finding a solution, and you are brave enough, you could try to find some useful information on the gSOAP log file.\nTo enable gSOAP logging, add a drop-in file of the storm-frontend-server unit:\n create a *.conf file (for example gsoap.conf) in the /etc/systemd/system/storm-frontend-server.service.d directory; add the following content [Service] Environment=\"CGSI_TRACE=1\" Environment=\"CGSI_TRACEFILE=/tmp/tracefile\" where /tmp/tracefile can be customized with any path to your log file;\n reload all the unit files with systemctl daemon-reload; restart the server with systemctl restart storm-frontend-server.  Please be very careful, it prints really a huge amount of information.\n","categories":"","description":"This section describes how to handle the log file of the StoRM FE service.\n","excerpt":"This section describes how to handle the log file of the StoRM FE …","ref":"/storm-docs/docs/getting-started/frontend/logging/","tags":"","title":"Logging StoRM FE service information"},{"body":"","categories":"","description":"","excerpt":"","ref":"/storm-docs/releases/","tags":"","title":"StoRM Components"},{"body":"Introduction StoRM maintains the information about the status of managed Storage Areas (such as free, used, busy, available, guaranteed and reserved space) and store them into the DB. Whenever some storage space is consumed or released by creating or deleting files, the status is updated. The storage space status stored into the DB is authorative. The information about the storage space stored into the DB are used also as information source for the Information Provider through the DIP (Dynamic Info Provider). There are cases in which the status of a SA must be initialized, for example when a fresh StoRM installation has to manage a storage space already populated with files, where the space used is not zero.\nThere are different methods to initialize the status of a SA, some executed within StoRM (GPFS quota and/or background-DU). In this section it is described how an administrator can initialize the status of a SA by using a configuration file, named used-space.ini.\nConfigure the used-space.ini file StoRM Backend will load /etc/storm/backend-server/used-space.ini file at bootstrap and initialize the used space of newly created SA to its values. Thus, restart the service in order to pick up your changes.\nThe content of the configuration file is quite simple: a list of sections corresponding to the SA in which are defined the used size and eventually the checktime. For each SA that needs to be initializated there is a section named with the same alias space-token-description defined in the /etc/storm/backend-server/namespace.xml file. Within the section one can define the following properties:\n   Property Description Format Required?     usedsize Used space in the SA expressed in Bytes Value without digits after the decimal mark Y   checktime Timestamp of the time wich the used size computation refers to Date in RFC-2822 format N    Here is an exsample of the used-space.ini configuration file:\n[IGI_TOKEN] checktime = Thu, 16 Dec 2021 18:02:04 +0100 usedsize = 32724 [TAPE_TOKEN] checktime = Thu, 16 Dec 2021 18:03:30 +0100 usedsize = 41054 [TESTVO_TOKEN] usedsize = 17686135 This file can be produced either manually or using StoRM Utils scripts.\nManual configuration  write your own /etc/storm/backend-server/used-space.ini file adding a section for each storage area you want to initialize; as section name use the space-token-description value as in the /etc/storm/backend-server/namespace.xml file; set the value of usedsize property as in the example; set the value of checktime property as in the example. To obtain an RFC-2822 timestamp of the current time you can execute the command date --rfc-2822.  Puppet configuration Ensure that the file exists at the service startup using a puppet define in the manifest directory of the module:\nfile { '/etc/storm/backend-server/used-space.ini': ensure =\u003e present, } Configuration using StoRM Utils Create the /etc/storm/backend-server/used-space.ini file divided into sections for each storage area which has to be initialized:\n get the list of SA aliases from the storm-get-space-aliases.sh command to be used as section name; update the value of usedsize property into the StoRM database using the storm-update-used-space.sh; set the value of checktime property issuing the command date --rfc-2822.  In order to use the StoRM utils scripts please refer to the StoRM utils section.\n","categories":"","description":"The used-space.ini file allows the system administrator to initialize the status of the Storage Area used space. Instructions on how to initialize a SA used space are given in this section.\n","excerpt":"The used-space.ini file allows the system administrator to initialize …","ref":"/storm-docs/docs/getting-started/backend/sa-usage-initialization/","tags":"","title":"Initialize Storage Area used space from file"},{"body":"","categories":"","description":"","excerpt":"","ref":"/storm-docs/search/","tags":"","title":"Search Results"},{"body":"Install the service package Grab the latest package from the StoRM repository. See instructions here.\nInstall the metapackage:\nyum install storm-frontend-mp Service configuration The Frontend component relies on a single configuration file that contains all the configurable parameters. This file is:\n/etc/storm/frontend-server/storm-frontend-server.conf containing a list of key-value pairs that can be used to configure the Frontend server. In case a parameter is modified, the Frontend service has to be restarted in order to read the new value.\nCurrently, the Frontend’s configuration parameters can be divided per section as follows.\nDatabase settings    Property Name Description     db.host Host for database connection. Default is localhost   db.user User for database connection. Default is storm   db.passwd Password for database connection. Default is password    Service settings    Property Name Description     fe.port Frontend service port. Default is 8444   fe.threadpool.threads.number Size of the worker thread pool. Default is 50   fe.threadpool.maxpending Size of the internal queue used to maintain SRM tasks in case there are no free worker threads. Default is 200   fe.gsoap.maxpending Size of the GSOAP queue used to maintain pending SRM requests. Default is 1000    Log settings    Property Name Description     log.filename Full log file name path.Default is /var/log/storm/storm-frontend.log   log.debuglevel Logging level. Possible values are: ERROR, WARN, INFO, DEBUG, DEBUG2. Default is INFO    Monitoring settings    Property Name Description     monitoring.enabled Enable/disable monitoring. Default is true.   monitoring.timeInterval Time interval in seconds between each monitoring round. Default is 60.   monitoring.detailed Enable/disable detailed monitoring. Default is false.    XML-RPC communication settings    Property Name Description     be.xmlrpc.host Backend hostname. Default is localhost.   be.xmlrpc.port Backend XML-RPC server port. Default is 8080.   be.xmlrpc.token Token used for communicating with Backend service. Mandatory, has no default.   be.xmlrpc.path XML-RPC server path. Default is /RPC2.   be.xmlrpc.check.ascii Enable/disable ASCII checking on strings to be sent via XML-RPC. Default is true.    REST communication settings    Property Name Description     be.recalltable.port REST server port running on the Backend machine. Default is 9998.    Blacklisting settings    Property Name Description     check.user.blacklisting Enable/disable user blacklisting. Default is false.   argus-pepd-endpoint The complete service endpoint of Argus PEP server. Mandatory if check.user.blacklisting is true. Example: https://argus-pep-host:8154/authz    Proxy settings    Property Name Description     security.enable.mapping Flag to enable/disable DN-to-userid mapping via gridmap-file. Default is false.   security.enable.vomscheck Flag to enable/disable checking proxy VOMS credentials. Default is true.    General settings    Property Name Description     wsdl.file WSDL file, complete with path, to be returned in case of GET request.    Configure the service with Puppet The StoRM puppet module can be used to configure the service on CentOS 7 platform.\nThe module contains the storm::frontend class that installs the metapackage storm-frontend-mp and allows site administrator to configure storm-frontend-server service by managing the following files:\n /etc/storm/frontend-server/storm-frontend-server.conf /etc/sysconfig/storm-frontend-server  The whole list of StoRM Frontend class parameters can be found here.\nExample of StoRM Frontend configuration done through storm::frontend class:\nclass { 'storm::frontend': be_xmlrpc_host =\u003e 'backend.test.example', be_xmlrpc_token =\u003e 'NS4kYAZuR65XJCq', db_host =\u003e 'backend.test.example', db_user =\u003e 'storm', db_passwd =\u003e 'storm',}Logging The Frontend logs information on the service status and the SRM requests received and managed by the process. The Frontend’s log supports different level of logging (ERROR, WARNING, INFO, DEBUG, DEBUG2) that can be set from the dedicated parameter in storm-frontend-server.conf configuration file. The Frontend log file named storm-frontend-server.log is placed in the /var/log/storm directory. At start-up time, the FE prints here the whole set of configuration parameters, this can be useful to check desired values. When a new SRM request is managed, the FE logs information about the user (DN and FQANs) and the requested parameters. At each SRM request, the FE logs also this important information:\n03/19 11:51:42 0x88d4ab8 main: AUDIT - Active tasks: 3 03/19 11:51:42 0x88d4ab8 main: AUDIT - Pending tasks: 0 about the status of the worker pool threads and the pending process queue. Active tasks is the number of worker threads actually running. Pending tasks is the number of SRM requests queued in the worker pool queue. These data gives important information about the Frontend load.\nThe monitoring.log file Monitoring service, if enabled, provides information about the operations executed in a certain amount of time writing them on file /var/log/storm/monitoring.log. This amount of time (called Monitoring Round) is configurable via the configuration property monitoring.timeInterval; its default value is 1 minute. At each Monitoring Round, a single row is printed on log. This row reports both information about requests that have been performed in the last Monitoring Round and information considering the whole FE execution time (Aggregate Monitoring). Informations reported are generated from both Synchronous and Asynchronous requests and tell the user:\n how many requests have been performed in the last Monitoring Round, how many of them were successful, how many failed, how many produced an error, the average execution time, the minimum execution time, the maximum execution time.  This row reports the Monitoring Summary and this is the default behavior of the monitoring service.\nExample:\n03/20 14:19:11 : [# 22927 lifetime=95:33:18] S [OK:47,F:15,E:0,m:0.085,M:3.623,Avg:0.201] A [OK:16,F:0,E:0,m:0.082,M:0.415,Avg:0.136] \\ Last:(S [OK:12,F:5,E:0,m:0.091,M:0.255] A [OK:6,F:0,E:0,m:0.121,M:0.415]) Furthermore it can be requested a more detailed Frontend Monitoring activity by setting the configuration property monitoring.detailed to true. Doing this, at each Monitoring Round for each kind of SRM operation performed in the Monitoring Round (srmls, srmPtp, srmRm, …) the following information are printed in a section with header “Last round details:\":\n how many request succeeded, how many failed, how many produced an error, the average execution time, the minimum execution time, the maximum execution time, the execution time standard deviation.  This is called the Detailed Monitoring Round. After this, the Monitoring Summary is printed. Then, considering the whole Frontend execution time, in a section with header “Details:”, a similar detailed summary is printed. This is called the Aggregate Detailed Monitoring.\nExample:\n03/20 14:19:11 : Last round details: 03/20 14:19:11 : [PTP] [OK:3,F:0,E:0,Avg:0.203,Std Dev:0.026,m:0.183,M:0.240] 03/20 14:19:11 : [Put done] [OK:2,F:0,E:0,Avg:0.155,Std Dev:0.018,m:0.136,M:0.173] 03/20 14:19:11 : [# 22927 lifetime=95:33:18] S [OK:47,F:15,E:0,m:0.085,M:3.623,Avg:0.201] A [OK:16,F:0,E:0,m:0.082,M:0.415,Avg:0.136] \\ Last:(S [OK:12,F:5,E:0,m:0.091,M:0.255] A [OK:6,F:0,E:0,m:0.121,M:0.415]) 03/20 14:19:11 : Details: 03/20 14:19:11 : [PTP] [OK:7,F:0,E:0,Avg:0.141,Std Dev:0.057,m:0.085,M:0.240] 03/20 14:19:11 : [Put done] [OK:5,F:0,E:0,Avg:0.152,Std Dev:0.027,m:0.110,M:0.185] 03/20 14:19:11 : [Release files] [OK:4,F:0,E:0,Avg:0.154,Std Dev:0.044,m:0.111,M:0.216] 03/20 14:19:11 : [Rm] [OK:3,F:0,E:0,Avg:0.116,Std Dev:0.004,m:0.111,M:0.122] Note:\n Operations not performed in current Monitoring Round are not printed in Detailed Monitoring Round. Operations never performed are not printed in Aggregate Detailed Monitoring. Operation performed in current Monitoring Round are aggregated in Aggregate Detailed Monitoring.  gSOAP tracefile If you have problem at gSOAP level, and you have already looked at the troubleshooting section of the StoRM site without finding a solution, and you are brave enough, you could try to find some useful information on the gSOAP log file. To enable gSOAP logging, set the following environment variables:\n$ export CGSI_TRACE=1 $ export CGSI_TRACEFILE=/tmp/tracefile and restart the Frontend daemon by calling directly the init script /etc/init.d/storm-frontend-server and see if the error messages contained in /tmp/tracefile could help. Please be very careful, it prints really a huge amount of information.\n","categories":"","description":"The StoRM Frontend service provides a SRM interface for storage management  and data access supporting VOMS authentication and authorization mechanisms.\n","excerpt":"The StoRM Frontend service provides a SRM interface for storage …","ref":"/storm-docs/docs/getting-started/frontend/service-config/","tags":"","title":"StoRM Frontend installation and configuration guide"},{"body":"The storm-webdav service configuration lives in the /etc/systemd/system/storm-webdav.service.d/storm-webdav.conf file. Typically the configuration works out of the box, but changes are required, for instance, to enable third-party transfer support.\nStoRM can also be configured using (one or more) YAML files.\nYou can find an empty YAML configuration file in /etc/storm/webdav/config/application.yml together with a README.md file in the same directory that provides configuration instructions.\nThat configuration file is used to override settings in the configuration file embedded in the storm webdav jar package:\nhttps://github.com/italiangrid/storm-webdav/blob/master/src/main/resources/application.yml\nthat you can consult to see what are the default settings.\nStorage area configuration Each storage area is configured by placing a properties file in the /etc/storm/webdav/sa.d directory. StoRM WebDAV will look for configuration in all files ending with .properties in this directory. If no configuration files are found, the service will not start.\nProperties    Name Description Required Example Default     name The name of the storage area True name=sa N/A   rootPath Root path for the storage area. Files will be served from this path. True rootPath=/storage/sa N/A   accessPoints Comma separated list of storage area access points. True accessPoints=/sa N/A   vos Comma-separated list of VOMS VOs trusted in this storage area False vos=atlas N/A   orgs Comma-separated list of OAuth/OpenID Connect token issuers trusted in this storage area False orgs=https://wlcg.cloud.cnaf.infn.it/ N/A   authenticatedReadEnabled Enables read access to users authenticated with an X.509 certificate issued by a trusted CA (users without VOMS credentials) False authenticatedReadEnabled=true false   anonymousReadEnabled Enables read access to anonymous users. False anonymousReadEnabled=false false   voMapEnabled Enables VO map files for this storage area. False voMapEnabled=false true   voMapGrantsWriteAccess VO map files grants read-only access to storage area files. Use this flag to grant write access to VO map files users False voMapGrantsWriteAccess=true false   orgsGrantReadPermission Enables read access to storage area files to users authenticated using OAuth/OIDC False orgsGrantReadPermission=false true   orgsGrantWritePermission Enables write access to storage area files to users authenticated using OAuth/OIDC False orgsGrantWritePermission=false false   wlcgScopeAuthzEnabled Enables scope-based authorization following the rules imposed by the WLCG JWT profile False wlcgScopeAuthzEnabled=true false   fineGrainedAuthzEnabled Enables fine-grained authorization engine for the storage area False fineGrainedAuthzEnabled=true false    Authorization configuration Up to version 1.2.0, StoRM WebDAV supported only flat authorization on storage areas. This means that the same access privileges would be granted to all the members of trusted VOMS Virtual Organization, or OpenID Connect/OAuth token issuer.\nThis authorization model is good enough in many scientific computing scenarios, and is the main one in use in WLCG computing.\nStarting with version 1.3.1, StoRM WebDAV introduces a new authorization engine that allows for finer-grained auhtorization.\nFlat authorization configuration Anonymous access To grant anonymous read access on the storage area, set anonymousReadEnabled=true.\nX.509 authenticated access To grant anonymous read access to users authenticated with an X.509 certificate issued by a trusted CA (i.e., users without VOMS credentials), set authenticatedReadEnabled=true.\nVOMS authorization Flat VOMS authorization is configured by including the VO that needs to be trusted in the vos property of the storage area configuration.\nOAuth/OIDC authorization Flat OAuth/OIDC authorization is enabled by including the token issuer in the orgs property of the storage area configuration.\nNote that the token issuer must also be included in the list of trusted issuer for the whole service in the /etc/storm/webdav/config/application.yml file.\nBy default, only read access is granted to the storage area. To enable write access, set orgsGrantWritePermission=true.\nWLCG JWT scope-based authorization Starting with version 1.3.1, StoRM WebDAV introduces support for WLCG JWT profile scope-based authorization.\nFor this to work, add the trusted token issuer to the trusted ones (see above) and set wlcgScopeAuthzEnabled=true.\nBy default, adding a token issuer to the list of the trusted ones for a storage area will grant read access to the storage area. If you want to enforce WLCG scope-based authorization completely, set orgsGrantReadPermission=false.\nFine-grained authorization Starting with version 1.3.1, StoRM WebDAV introduces a new authorization engine which allows for finer-grained authorization. It’s possible to define access policies for individual files/folders in the storage area, and targeting specific authenticated users or group of users.\nMore flexibility means also more configuration complexity. To enable fine-grained authorization on a storage area, set fineGrainedAuthzEnabled=true. The authorization engine will be activated together with other authorization mechanism described above.\nFine-grained authorization policies Fine-grained authorization policies are defined using spring application configuration YAML files, i.e., typically by editing the /etc/storm/webdav/config/application.yml file.\nAn example set of policies is given below:\nstorm:authz:policies:- sa:wlcgactions:- list- readeffect:permitdescription:Grant read access to any userprincipals:- type:anyone- sa:wlcgactions:- alleffect:permitdescription:Grant read/write access to WLCG VOMS vo usersprincipals:- type:voparams:vo:wlcgTwo policies are defined, for the wlcg storage area. These policies are flat, i.e. cover the whole storage area. The first policy allows read access to anonymous users. The second one allows read/write access to any user authenticated with VOMS credentials from the wlcg VO.\nThe policy above is basically equivalent to these settings in the storage area configuration.\nanonymousReadEnabled=true vos=wlcg Using the fine-grained authorization engine is not convenient if the access model for the storage area is flat.\nPolicies are evaluated in the order in which they are defined, and the fist applicable one is used to render the authorization decision.\nA policy contains the following directives:\n  sa: The nome of the storage area to which the policy applies.\n  actions: a list of actions that the policy is authorizing. Possible values:\n list: the ability to list directory contents read: the ability to read files write: the ability to write files and create directories delete: the ability to delete files/directories all: a catchall for all other actions    paths: the list of paths, within the storage area, the policy applies to. If omitted, the policy will apply to all paths.\nTo match a directory and all its contents, use a wildcard like the following: /some/dir/**\n  effect:\n permit: defines a permit policy deny: defines a deny policy    description: A textual description of the policy. This is a required field, and is mainly useful to help debugging authorization problems.\n  principals: a list of principals that the policy will apply to. Simple principal types are defined by a string value, while complex principal types require parameters.\nFor example, the anyone principal is a simple principal type, while the jwt-group principal is a complex type that requires two parameters: the token issuer URI, and the group name.\n     Principal Type Description Parameters     anyone simple will match any user (authenticated or not) N/A   any-authenticated-user simple will match any authenticated user N/A   anonymous simple will match any anonymous user N/A   vo complex will match authenticated users presenting a valid VOMS credential for a given VO. vo: the name of the VO   vo-map complex will match authenticated mapped to a VO through a vomap configuration vo: the name of the VO   fqan complex will match authenticated users presenting a valid VOMS credential that contains the given FQAN. fqan: the VOMS fqan   jwt-group complex will match authenticated users with valid JWT token and belonging to the given group. iss: the token issuer, group: the group name   jwt-scope complex will match authenticated users with valid JWT token bearing the requested scope. iss: the token issuer, scope: the scope   jwt-issuer complex will match authenticated users with valid JWT token issued by the required token issuer iss: the token issuer   jwt-subject complex will match authenticated users with valid JWT token and presenting the requested subject claim. iss: the token issuer, sub: the subject   x509-subject complex will match authenticated users presenting a valid x.509 credential and a given subject subject: the certificate subject, in RFC2253 format    Examples storm:authz:policies:- sa:exampleactions:- list- readeffect:permitpaths:- /read-only/**description:Grant read access to any authenticated user to /read-only dataprincipals:- type:anyone- sa:exampleactions:- alleffect:permitdescription:Grant read/write access to the whole sa to /example/admins group membersprincipals:- type:jwt-groupparams:iss:https://iam.examplegroup:/example/admins- type:fqanparams:fqan:/example/adminsThe policies above grant:\n read-only access to anyone on the /read-only folder, in the example storage area all access to the example storage area to users in the group /example/admins, authenticated with VOMS or OpenID Connect  VO mapfiles When VO map files are enabled, users can authenticate to the StoRM webdav service using the certificate in their browser and be granted VOMS attributes if their subject is listed in one of the supported VO mapfile. You can configure whether users listed in VO map files will be granted read-only or write permissions in the storage area configuration in the /etc/storm/webdav/sa.d directory.\nThis mechanism is very similar to the traditional Gridmap file but is just used to know whether a given user is registered as a member in a VOMS managed VO and not to map his/her certificate subject to a local unix account.\nHow to enable VO map files VO map files support is disabled by default in StoRM WebDAV.\nSet STORM_WEBDAV_VO_MAP_FILES_ENABLE=true in\n/etc/systemd/system/storm-webdav.service.d/storm-webdav.conf to enable VO map file support.\nVO map files format and location A VO map file is a csv file listing a certificate subject, issuer and email for each line. It can be easily generated for a given VO using the voms-admin command line utility. VO map files by default live in the /etc/storm/webdav/vo-mapfiles.d directory.\nFor each VO, a file named:\nVONAME.vomap\nis put in the /etc/storm/webdav/vo-mapfiles.d directory.\nVO Map file examples The file /etc/storm/webdav/vo-mapfiles.d/test.vomap with the following content:\n/C=IT/O=INFN/OU=Personal Certificate/L=CNAF/CN=Andrea Ceccanti,/C=IT/O=INFN/CN=INFN CA,andrea.ceccanti@cnaf.infn.it /C=IT/O=INFN/OU=Personal Certificate/L=CNAF/CN=Enrico Vianello,/C=IT/O=INFN/CN=INFN CA,enrico.vianello@cnaf.infn.it will grant the test VO membership to clients authenticated with the above subjects.\nTo generate a VO mapfile for the cms VO, you could run the following command\nvoms-admin --host voms.cern.ch --vo cms list-users \u003e /etc/storm/webdav/vo-mapfiles.d/cms.vomap Custom application.yml configuration The application.yml file can be used to override settings embedded in the storm-webdav configuration.\nIt’s mainly used to:\n configure the list of trusted OAuth token issuers configure the list of trusted OpenID Connect providers (since version 1.3.0) configure fine-grained authorization policies (since version 1.3.0)  Trusted OAuth connect token issuers configuration In order to enable an OAuth token issuer in the context of a storage area, such issuer must be included in the list of trusted issuer specified in this file and in the list of trusted organizations for the storage area in the storage area properties in /etc/storm/webdav/sa.d.\nOAuth authorization example configuration To trust the super-provider.example OAuth/OpenID Connect provider for the storage area example, such provider must be listed among the trusted token issuers in /etc/storm/webdav/config/application.yml:\noauth:issuers:- name:super-providerissuer:https://super-provider.example/And in the storage area configuration /etc/storm/sa.d/example.properties:\nname=example rootPath=/storage/example accessPoints=/example vos=example orgs=https://super-provider.example/ OpenID connect authentication Starting with version 1.3.0, StoRM WebDAV supports OpenID Connect authentication on its storage area browser application (i.e., the thing you get when you point your browser to a StoRM WebDAV instance and that you use to browse the storage area contents).\nTo enable OpenID Connect authentication you need:\n a trusted OpenID Connect provider, e.g. INDIGO IAM for WLCG a client registered in such provider with the authorization_code grant type enabled; instructions on how to register a client are typically provided by the OpenID provider  OpenID Connect authentication must be explicitly enabled in /etc/storm-webdav/config/application.yml, as follows:\noauth:enable-oidc:trueStoRM WebDAV leverages the OpenID Connect support provider by Spring security libraries. Below an example is given for the WLCG IAM OpenID Connect provider:\nspring:security:oauth2:client:provider:wlcg:issuer-uri:https://wlcg.cloud.cnaf.infn.it/registration:wlcg:provider:wlcgclient-name:WLCG IAMclient-id:PUT_YOUR_CLIENT_ID_HEREclient-secret:PUT_YOUR_CLIENT_SECRET_HEREscope:- openid- profile- wlcg.groupsFine-grained authorization Starting with version 1.3.0, StoRM WebDAV provides support for fine-grained authorization on storage areas.\nBefore 1.3.0, authorization was coarse-grained, i.e. read and write privileges on a storage area were granted to a VOMS VO or OAuth trusted issuer, and those privileges were applied to the whole storage area, i.e. it was not possible to have different authorization policies on folders or on specific paths, or to grant different privileges to specific groups or subjects.\nFine-grained authorization can be enabled on a storage area as follows:\nname=example rootPath=/storage/example ... fineGrainedAuthzEnabled=true Then authorization policies must be included in the /etc/storm/webdav/config/application.yml configuration. Example policies are given below:\nstorm:authz:policies:- sa:exampleactions:- list- readeffect:permitdescription:Grant read access to users in the /example/read groupprincipals:- type:oauth-groupparams:iss:https://vo.example/group:/example/read- sa:exampleactions:- alleffect:permitdescription:Grant write access to /example/write-area to /example/write usersprincipals:- type:oauth-groupparams:iss:https://vo.example/group:/example/writepaths:- /write-area/**The first policy grants read access to the whole example storage area to members of group /example/read, as asserted by the trusted OAuth token issuer https://vo.example.\nThe second policy grants all privileges to members of group /example/write to the path /write-area, and all its subpaths, as defined in the context of the storage area, i.e. below any of the access points defined for that storage area. So, assuming the the example storage area is configured to have a single access point, /example, the policy will apply to /example/write-area and all its subpath.\nFine-grained authorization policies A fine-grained authorization policy defines access rules to directory and files in the context of a storage area. In detail, an access policy defines access rules that regulate which actions on which resources are allowed for a set of principals. Actions, in this context, are read, write, list and delete operations on files and directories. Resources are files and directories. Principals are authenticated entities (i.e., users or agents).\nPolicies are defined in the context of a storage area, and are applied in order following a first-applicable principle. This means that the first policy found in the list that matches an incoming request will be applied when rendering an authorization decision.\nA policy matches an incoming request when the resources, actions and principal in the policy match the target resource action and principal in the request.\nAn example, annotated policy is given below:\npolicies:// The storage area that will apply to this policy- sa:exampleactions:// An array of actions regulated by this policy, possible values are// read, write, delete, list, all- list- read// The policy effect. Possible values are 'permit', 'deny'effect:permit// A policy description.description:Grant read access to selected vo users// List of paths that this policy will apply to.// Paths are specific to the storage area, i.e. are relative to the// storage area access points. // Example:// In a storage area 'example', that as the '/example/' access point,// in order to match the '/example/read-only' path and its subpaths, the// path expression included in the policy would be '/read-only/**'// '**' matches any file or directory, at any level of nesting, of a given path// '*' matches any file or directory contained in a given path// The matching rules follow the Spring AntPath matcher conventions, see:// https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.htmlpaths:- /read-only/**// The list of principals this policy will apply to. Below examples of principals // are givenprincipals:// Anymous principal, will match users not authenticated- type:anonymous // Any authenticated user, will match users that have been authenticated// (with any supported mechanism, i.e. X.509, OAuth or OIDC)- type:any-authenticated-user// anyone, will match any principal- type:anyone// a VOMS fully qualified attribute name- type:fqanparams:fqan:/test.vo/Role=admin// A VOMS vo- type:voparams:vo:dteam// An OAuth/OpenID Connect group, as asserted by a trusted OAuth/OpenID Connect token issuer- type:oauth-groupparams:iss:https://wlcg.cloud.cnaf.infn.it/group:/wlcg/xfers// An OAuth/OpenID Connect scope, as asserted by a trusted OAuth/OpenID Connect token issuer- type:oauth-scopeparams:iss:https://wlcg.cloud.cnaf.infn.it/scope:/storage.read:/// An OAuth/OpenID Connect subject, as asserted by a trusted OAuth/OpenID Connect token issuer- type:oidc-subjectparams:iss:https://wlcg.cloud.cnaf.infn.it/sub:a1b98335-9649-4fb0-961d-5a49ce108d49Threadpool sizes The size of the thread pool used to serve incoming requests and third-party-copy requests can be set with the following variables:\nstorm:connector:max-connections:300max-queue-size:900tpc:max-connections:200max-connections-per-route:150progress-report-thread-pool-size:(# of cores of your machine)Conscrypt Conscrypt improves TLS performance and can be enabled as follows:\nstorm:tpc:use-conscrypt:truetls:use-conscrypt:trueenable-http2:trueConfiguring support for third-party transfers Starting with version 1.1.0, StoRM WebDAV supports third party copy transfers.\nThird party transfer support is enabled and active by default, but will work as expected only when properly configured.\nHostname configuration Support for third-party transfers is implemented by supporting a COPY method request where the Source or Destination header points to a remote resource.\nIn order to tell apart remote resources from local ones, StoRM webdav must be configured accordingly.\nThis is done via the STORM_WEBDAV_HOSTNAME_0, STORM_WEBDAV_HOSTNAME_1, …, environment variables, which allow to define for which hostnames (and aliases) the service is serving requests.\nExample:\nSTORM_WEBDAV_HOSTNAME_0=\"ds-808.cr.cnaf.infn.it\" STORM_WEBDAV_HOSTNAME_1=\"gridhttps-storm-atlas.cr.cnaf.infn.it\" OAuth authorization server configuration The OAuth authorization server can be used by clients such as FTS to obtain an OAuth access token that grants the same privileges as a VOMS credential. This mechanism is currently used to implement a form of delegated authorization in support of third-party transfers.\nThe tokens issued by the StoRM WebDAV OAuth authorization servers will only be accepted by the StoRM WebDAV service instances. In a replicated setup, just ensure that the OAuth server configuration is consistent across the replicas.\nBelow is an example of configuration:\n# THe issuer linked to the issued tokens. This is typically the 'https://' followed # by the storm webdav instance main alias. STORM_WEBDAV_AUTHZ_SERVER_ISSUER=\"https://gridhttps-storm.atlas.cr.cnaf.infn.it\" # The secret used to sign the tokens. STORM_WEBDAV_AUTHZ_SERVER_SECRET=\"supersupersupersecret\" Configuring support for externalized sessions Starting with version 1.4.0, StoRM WebDAV supports storing HTTP session information in an external redis server.\nThis can be useful when deploying multiple replicas of the StoRM WebDAV service.\nExternalized session support can be enabled by adding the following configuration to the /etc/storm/webdav/config/application.yaml file:\nspring:session:store-type:redisredis:host:redis.host.exampleport:6379For other redis connection configuration options, see the Spring boot reference guide.\nMemory You should give a reasonable amount of memory to StoRM WebDAV to do its work. The amount depends on the number of concurrent requests that the server needs to handle.\nA good starting point is giving the server 2G of heap memory, by setting the following env variable:\nSTORM_WEBDAV_JVM_OPTS=-Xms2048m -Xmx2048m In general, allowing for 256Mb + (# threads * 6Mb) should give StoRM WebDAV enough memory to do its work.\nUse /dev/urandom for random number generation Using /dev/random can lead to the service being blocked if not enough entropy is available in the system.\nTo avoid this scenario, use /dev/urandom, by setting the JVM options as follows:\nSTORM_WEBDAV_JVM_OPTS=-Xms2048m -Xmx2048m -Djava.security.egd=file:/dev/./urandom Puppet configuration The StoRM puppet module can be used to configure the service on CENTOS 7.\nWe recommend to use directly the StoRM WebDAV YAML configuration to tune your deployment configuration, instead of using variables defined at the puppet level, i.e.:\n# Install service and configure enviroment variablesclass { 'storm::webdav': hostnames =\u003e ['storm-webdav.test.example'],}# Configure your application.ymlstorm::webdav::application_file { 'application.yml': source =\u003e 'puppet:///the/path/to/the/application.yml',}# Storage Area configuration (one for each storage area)storm::webdav::storage_area_file { 'test.vo.properties': source =\u003e 'puppet:///the/path/to/the/test.vo.properties',}storm::webdav::storage_area_file { 'test.vo.2.properties': source =\u003e 'puppet:///the/path/to/the/test.vo.2.properties',}","categories":"","description":"In this section we describe how to configure the StoRM WebDAV service.\n","excerpt":"In this section we describe how to configure the StoRM WebDAV service. …","ref":"/storm-docs/docs/getting-started/webdav/service-config/","tags":"","title":"Service configuration"},{"body":"  .col-lg-4 { flex-grow: 0; flex-shrink: 0; flex-basis: 50%; max-width: 50%; }   #td-cover-block-0 { background-image: url(/storm-docs/featured-background_hudf5fedb61b31f317d42d80dbfcd21dc9_181740_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/storm-docs/featured-background_hudf5fedb61b31f317d42d80dbfcd21dc9_181740_1920x1080_fill_q75_catmullrom_top.jpg); } }  StoRM (STOrage Resource Manager) Documentation   GitHub   StoRM (STOrage Resource Manager) is a light, scalable, flexible, high-performance, file system independent, storage manager service (SRM) for generic disk based storage system, compliant with the standard SRM interface version 2.2.\n           Implements the SRM specification  StoRM is adopted in the context of WLCG computational Grid framework. It provides data management capabilities in a Grid environment to share, access and transfer data among heterogeneous and geographically distributed data centers. StoRM implements the Storage Resource Manager (SRM) specification.\n   Built for cluster filesystems  StoRM works on any POSIX filesystems, but was built to bring in the Grid the advantages of high performance storage systems based on cluster file system (such as GPFS from IBM or Lustre from Sun Microsystems), supporting direct access (native POSIX I/O call) to shared files and directories, as well as other standard Grid access protocols.\n    ","categories":"","description":"","excerpt":"  .col-lg-4 { flex-grow: 0; flex-shrink: 0; flex-basis: 50%; …","ref":"/storm-docs/","tags":"","title":"StoRM"},{"body":"storm-get-space-aliases The command storm-get-space-aliases retrieves the list of storage areas' space aliases of your StoRM instance. Usage:\nstorm-get-space-aliases.sh [-u \u003cdb-username\u003e] [-p \u003cdb-password\u003e] Example:\n$ sh storm-get-space-aliases.sh -u storm -p storm IGI_TOKEN TAPE_TOKEN TESTVO_TOKEN This command doesn’t change any information stored on database.\nstorm-update-used-space The command storm-update-used-space is used to update the used space information related to a specific space-alias. Usage:\nstorm-update-used-space.sh [-u \u003cdb-username\u003e] [-p \u003cdb-password\u003e] [-a \u003cspacetoken-alias\u003e] [-s \u003cused-space-size\u003e] The used-space-size must be expressed in bytes.\nExample:\n$ sh storm-update-used-space.sh -u storm -p storm -a TESTVO_TOKEN -s 52080 Getting space info for 'TESTVO_TOKEN' ... TOTAL_SIZE=4000000000, FREE_SIZE=3999957920, USED_SIZE=42080 Setting new free size as 3999947920 and new used space as 52080 ... Update query exited with 0 ","categories":"","description":"This is a set of useful scripts that query the StoRM DB in order to get/update storage areas-related informations.\n","excerpt":"This is a set of useful scripts that query the StoRM DB in order to …","ref":"/storm-docs/docs/getting-started/backend/storm-utils-usage/","tags":"","title":"Usage of StoRM utils scripts"},{"body":"Introduction StoRM Path Authorization Database gives to the system administrator a way to customize users permissions on internal paths of a storage area: different local users/groups could have different rights on the same path. For each SRM request, the authorized VO user is mapped on one local user and group. Knowing this, the system administrator can write a list of ACE (Access Control Entry), evaluated by a selected algorithm, in order to permit or deny to a local user/group a list of operations on a particular path.\nThe choose of the evaluation algorithm and the definition of the list of ACEs can be done by editing the file:\n/etc/storm/backend-server/path-authz.db. Evaluation algorithm The selected evaluation algorithm is indicated by the property algorithm. Its default value is:\nalgorithm=it.grid.storm.authz.path.model.PathAuthzAlgBestMatch  NOTE: Currently, this is the unique supported algorithm that can be specified.\n To determine if a request succeeds, the PathAuthzAlgBestMatch evaluation algorithm processes the ACE list in a computed order:\n only the ACE which have a local UNIX group that matches the requester subject are considered; the order of the ACE is defined on the base of distance from the requested SURL’s StFN and the path specified within the ACE; each ACE is processed until all of the bits of the requester’s access have been checked.  The result will be:\n NOT_APPLICABLE if there are no ACE matching with the requester. INDETERMINATE if there is at least one bit not checked. DENY if there is at least one bit DENIED for the requestor PERMIT if all the bits are PERMIT  Access Control Entries The default ACE stored into path-authz.db authorization file allows every kind of operation on all the storage areas:\n#--------+-----------------------+---------+ # user | Path | Permission | ACE | # class | | mask | type | #--------+-----------------------+---------+ @ALL@ / RLWFDMN permit Each ACE is composed by the following information:\n USER CLASS contains the name of the UNIX group involved or @ALL@ to match all the groups; PATH is the relative sub-path based on the storage area root; the PERMISSION MASK contains from one to all the following letters:  W : WRITE_FILE “Write data on existing files” R : READ_FILE “Read data” F : MOVE/RENAME “Move a file” D : DELETE “Delete a file or a directory” L : LIST_DIRECTORY “Listing a directory” M : CREATE_DIRECTORY “Create a directory” N : CREATE_FILE “Create a new file”   ACE TYPE value could be permit or deny and indicates if the selected operations on that path have to be blocked or allowed.  Example To properly configure StoRM’s Path Authorization DataBase it’s useful to have the right knowledge about the users/groups involved with LCMAPS mapping.\nHere we’re going to show how to configure a simple path authorization filter on our test VO’s storage area: test.vo. The idea is to create:\n a sub-directory test.vo/PRD accessible in read/write mode only by users that belong to the local group testvoprd; a sub-directory test.vo/USERS accessible in read/write mode only by users that belong to the local group testvo but readable by testvoprd users.  Edit:\n/etc/storm/backend-server/path-authz.db  as follow:\n#----------+--------------+------------+--------+ # user | Path | Permission | ACE | # class | | mask | type | #----------+--------------+------------+--------+ testvoprd /test.vo/PRD RLWFDMN permit @ALL@ /test.vo/PRD RLWFDMN deny testvo /test.vo/USERS RLWFDMN permit testvoprd /test.vo/USERS RL permit @ALL@ /test.vo/USERS RLWFDMN deny @ALL@ / RLWFDMN permit This ACE list say that:\n All the users mapped into testvoprd group can do any kind of operation into /test.vo/PRD directory and read/list files into /test.vo/USERS (1st and 4th ACEs); All the users mapped into testvo group can do any kind of operation into /test.vo/USERS directory (3rd ACE); All the user mapped into a group different from testvoprd and testvo can’t access /test.vo/PRD or /test.vo/USERS (2nd and 5th ACEs); No ACEs are defined for the other storage areas (6th ACE).  The order of the ACEs is important because the evaluation algorithm stops after the first match with minimal distance from Path. For example, if we invert the first two rows of our ACE list, nobody will be authorized to read or write into /test.vo/PRD.\nTo apply the changes to path-authz.db you need to restart storm-backend-server:\nsystemctl restart storm-backend-server Users In order to do some test on the path-authz.db configuration showed above, two users with different VOMS attributes have been used:\n /C=IT/O=IGI/CN=test0 /C=IT/O=INFN/OU=Personal Certificate/L=CNAF/CN=Enrico Vianello with “Role=R1”  Supposing the same LCMAPS configuration of this example, user Enrico Vianello will be mapped into testvoprd local group (it has “Role=R1” between its FQANs). User test0 has no “Role=R1” then it will be mapped to testvo local group.\nSRM tests The following tests have been done using:\n gfal tool for the SRM requests globus-url-copy of Globus Toolkit to direct upload/download files acl package (it’s a StoRM prerequisite) to read the ACL set on files/directories  ## Switch to user \"Enrico Vianello\" ## $ voms-proxy-init --voms test.vo:/test.vo/Role=R1 --cert vianello-2014.p12 ## Create directory /test.vo/tmp ## $ gfal-mkdir srm://centos6-devel.cnaf.infn.it:8444/test.vo/tmp ## Get ACLs from /test.vo/tmp ## $ getfacl /storage/test.vo/tmp getfacl: Removing leading '/' from absolute path names # file: storage/test.vo/tmp # owner: storm # group: storm user::rwx group::--- group:testvoprd:r-x mask::rwx other::--- ## The testvoprd ACL has been added added ## ## Create new local file: ## $ echo \"Hello world!!\" \u003e hello.txt ## Upload local file to /test.vo/tmp ## $ cat hello.txt | gfal-save srm://centos6-devel.cnaf.infn.it:8444/test.vo/tmp/hello.txt ## Check if the uploaded file exists: ## $ gfal-ls srm://centos6-devel.cnaf.infn.it:8444/test.vo/tmp hello.txt ## Get ACLs from /test.vo/tmp/hello.txt $ getfacl /storage/test.vo/tmp/hello.txt getfacl: Removing leading '/' from absolute path names # file: storage/test.vo/tmp/hello.txt # owner: storm # group: storm user::rw- group::--- group:testvoprd:rw- mask::rwx other::--- ## The testvoprd ACL has been added added ## Switch to test0 user: ## $ voms-proxy-init --voms test.vo --cert test0.p12 ## Get file content /test.vo/tmp/hello.txt ## $ gfal-copy srm://centos6-devel.cnaf.infn.it:8444/test.vo/tmp/hello.txt file:///tmp/hello.txt Copying 1 [DONE] after 1s ## Check the updated ACL on /test.vo/tmp/hello.txt ## $getfacl /storage/test.vo/tmp/hello.txt getfacl: Removing leading '/' from absolute path names # file: storage/test.vo/tmp/hello.txt # owner: storm # group: storm user::rw- group::--- group:testvo:r-- group:testvoprd:rw- mask::rwx other::--- ## testvo read permission has been added ## Switch to user \"Enrico Vianello\" ## $ voms-proxy-init --voms test.vo:/test.vo/Role=R1 --cert vianello-2014.p12 ## Create directory /test.vo/PRD (accessible only to testvoprd users): $ gfal-mkdir srm://centos6-devel.cnaf.infn.it:8444/test.vo/PRD ## getting ACLs on /test.vo/PRD $ getfacl /storage/test.vo/PRD/ getfacl: Removing leading '/' from absolute path names # file: storage/test.vo/PRD/ # owner: storm # group: storm user::rwx group::--- group:testvoprd:r-x mask::rwx other::--- ## Upload local file to /test.vo/PRD/hello.txt $ cat hello.txt | gfal-save srm://centos6-devel.cnaf.infn.it:8444/test.vo/PRD/hello.txt ## Check if the uploaded file exists: $ gfal-ls srm://centos6-devel.cnaf.infn.it:8444/test.vo/PRD hello.txt ## Get ACLs from /test.vo/PRD/hello.txt $ getfacl /storage/test.vo/PRD/hello.txt getfacl: Removing leading '/' from absolute path names # file: storage/test.vo/PRD/hello.txt # owner: storm # group: storm user::rw- group::--- group:testvoprd:rw- mask::rwx other::--- ## The testvoprd ACL has been added added ## Get uploaded file content: $ gfal-cat srm://centos6-devel.cnaf.infn.it:8444/test.vo/PRD/hello.txt Hello World!! ## Switch to test0 user: $ voms-proxy-init --voms test.vo --cert test0.p12 ## Get file content expecting unauthorized failure (1): $ gfal-cat srm://centos6-devel.cnaf.infn.it:8444/test.vo/PRD/hello.txt gfal-cat: error: Permission denied ## Get file content expecting unauthorized failure (1): $ gfal-copy srm://centos6-devel.cnaf.infn.it:8444/test.vo/PRD/hello.txt file:///tmp/hello.txt Copying 1 [FAILED] after 2s gfal-copy: error: Permission denied At this point a question could be raised: how does it works with direct calls from GridFTP? The GridFTP TURLs should be used only within the context of a SRM request (between a srmPtG and a srmRf or between a srmPtP and a srmPd). In this case there’s no problem because the SRM request will set the necessary ACL (indipendently from the enforcing approach used). If the GridFTP call is made out of the context of a SRM request the scenary depends on the operations done before and on who has done them, or depends on the Default ACL. It’s not sure that the necessary ACL is set (if the enforcing approach is JiT the ACL could even not exist), then the request can fail.\nIn case of AoT enforcing approach, if almost one user mapped on the same group has already done a SRM request on the resource, then a direct access to the same resource, providing the necessary credentials, will be successful.\nFor example, at the point of the example above, if user test0 does a globus-url-copy like the gfal-copy just done, the request will be successful:\n## Switch to user test0 ## ## Check failure on file download passing through StoRM SRM endpoint: ## $ gfal-copy srm://centos6-devel.cnaf.infn.it:8444/test.vo/PRD/hello.txt file:///tmp/hello.txt Copying 1 [FAILED] after 2s gfal-copy: error: Permission denied ## Resource is not reachable via SRM! ## Check failure on file download by directly accessing via GridFTP ## $ globus-url-copy -vb gsiftp://centos6-devel.cnaf.infn.it:2811/storage/test.vo/PRD/Hello.txt hello.tx Source: gsiftp://centos6-devel.cnaf.infn.it:2811/storage/test.vo/PRD/ Dest: file:///home/vianello/ Hello.txt -\u003e hello.tx error: globus_ftp_client: the server responded with an error 500 Command failed. : open error: Permission denied Avoid conflicts with Default ACL List StoRM allows site administrators to set a Default ACL List for each storage area (see backend configuration section of StoRM’s System Administrator guide).\nThe Default ACL List contains one or more pairs of a local user (uid) or group id (gid) and a permission (R, W, RW). All these ACL are automatically added by StoRM to the requested resource, at each read or write request.\nObviously, if the Default ACL involves users or groups that are used also into the path-authz.db, this configuration can generate conflicts and unexpected behaviors.\nFor example, if we add to our test.vo storage area the following default ACL:\nSTORM_TESTVO_DEFAULT_ACL_LIST=testvo:RW  we will give to all the users with group testvo read and write permissions on all the files and directories within the storage area. Default ACL list is propagated onto sub-directories and files when they are created or read by a SRM request. Then, if the site administrator applies it on an already existent filesystem tree, he must manually run a command which fix all the storage area’s ACL.\nGoing back to our example, added the STORM_TESTVO_DEFAULT_ACL_LIST and after a re-run of yaim confguration, we can retry to create/read/delete from test.vo, with the following results:\n## Create test0 VOMS proxy for test.vo ## $ voms-proxy-init --voms test.vo --cert test0.p12 ## Check root directory: it's empty ## $ gfal-ls srm://centos6-devel.cnaf.infn.it:8444/test.vo/ ## Attempt to create PRD directory: it should fail! ## $ gfal-mkdir srm://centos6-devel.cnaf.infn.it:8444/test.vo/PRD gfal-mkdir: error: Permission denied ## Upload file into test.vo:##  $ cat hello.txt | gfal-save srm://centos6-devel.cnaf.infn.it:8444/test.vo/Hello.txt ## Switch to user Enrico Vianello ## $ voms-proxy-init --voms test.vo:/test.vo/Role=R1 --cert vianello-2014.p12 ... ## Attempt to create PRD directory: a success is expected! $ gfal-mkdir srm://centos6-devel.cnaf.infn.it:8444/test.vo/PRD ## Upload file into PRD directory ## $ cat hello.txt | gfal-save srm://centos6-devel.cnaf.infn.it:8444/test.vo/PRD/Hello.txt ## Switch to test0 user ## $ voms-proxy-init --voms test.vo --cert test0.p12 ## Download unauthorized file: expected error, success retrieved!! $ globus-url-copy -vb gsiftp://centos6-devel.cnaf.infn.it:2811/storage/test.vo/PRD/Hello.txt /tmp/Hello.txt Source: gsiftp://centos6-devel.cnaf.infn.it:2811/storage/test.vo/PRD/ Dest: file:///tmp/ Hello.txt ## just to see the different ACL: $ getfacl /storage/test.vo/PRD/Hello.txt getfacl: Removing leading '/' from absolute path names # file: storage/test.vo/PRD/Hello.txt # owner: storm # group: storm user::rw- group::--- group:testvo:rw- group:testvoprd:rw- mask::rwx other::--- As expected, the new ACE:\ngroup:testvo:rw-  is propagated into all the test.vo sub-directories and allow read operations on files that would be unreadable before:\n$ globus-url-copy -vb gsiftp://centos6-devel.cnaf.infn.it:2811/storage/test.vo/PRD/Hello.txt /tmp/Hello.txt Source: gsiftp://centos6-devel.cnaf.infn.it:2811/storage/test.vo/PRD/ Dest: file:///tmp/ Hello.txt So, be careful and check both Defualt ACL List and storm-authz.db in order to avoid conflicts.\n","categories":"","description":"StoRM Path Authorization Database gives to the system administrator a way to customize users permissions on internal paths of a storage area: different local users/groups could have different rights on the same path.\n","excerpt":"StoRM Path Authorization Database gives to the system administrator a …","ref":"/storm-docs/docs/getting-started/backend/path-authz.db/","tags":"","title":"Configure StoRM Path Authorization Database"},{"body":"Service installation Grap the latest package from the StoRM repository. See instructions here.\nyum install storm-webdav Service operation Starting and stopping the service In order to start the service type:\n$ systemct start storm-webdav Stop the service with:\n$ systemctl stop storm-webdav Service status To check the service status type:\n$ systemctl status storm-webdav Check that the service responds with:\n$ curl http://localhost:8085/actuator/health -s | jq { \"status\": \"UP\" } Get the service metrics at the following URL:\n$ curl http://localhost:8085/status/metrics?pretty=true -s | jq { \"version\" : \"4.0.0\", \"gauges\" : { \"jvm.gc.G1-Old-Generation.count\" : { \"value\" : 0 }, \"jvm.gc.G1-Old-Generation.time\" : { \"value\" : 0 } ... } Service logs The service logs live in the /var/log/storm/webdav directory.\nHere the following logs are saved:\n storm-webdav-server.log, which provides the main service log; storm-webdav-server-access.log, which provides the http access log.  Access points A storage area named sa is accessible by default at the URL https://hostname:8443/sa.\nIf the service is configured such to allow anonymous access, the default URL is http://hostname:8085/sa.\n","categories":"","description":"StoRM WebDAV service installation, operation and configuration.\n","excerpt":"StoRM WebDAV service installation, operation and configuration.\n","ref":"/storm-docs/docs/getting-started/webdav/","tags":"","title":"StoRM WebDAV"},{"body":"","categories":"","description":"The StoRM WebDAV service provides a storage management and data access solution supporting VOMS and OAuth/OpenID Connect authentication and authorization mechanisms.\n","excerpt":"The StoRM WebDAV service provides a storage management and data access …","ref":"/storm-docs/docs/overview/webdav/","tags":"","title":"StoRM WebDAV"}]